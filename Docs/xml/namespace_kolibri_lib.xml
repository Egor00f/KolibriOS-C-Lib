<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="ru">
  <compounddef id="namespace_kolibri_lib" kind="namespace" language="C++">
    <compoundname>KolibriLib</compoundname>
    <innerclass refid="struct_kolibri_lib_1_1point" prot="public">KolibriLib::point</innerclass>
    <innernamespace refid="namespace_kolibri_lib_1_1_background">KolibriLib::Background</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1child_window">KolibriLib::childWindow</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_colors">KolibriLib::Colors</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1filesystem">KolibriLib::filesystem</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1graphic">KolibriLib::graphic</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1keyboard">KolibriLib::keyboard</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_lib_ini">KolibriLib::LibIni</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1mouse">KolibriLib::mouse</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_network">KolibriLib::Network</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_o_s">KolibriLib::OS</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_sound">KolibriLib::Sound</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_thread">KolibriLib::Thread</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_u_i">KolibriLib::UI</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1window">KolibriLib::window</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_kolibri_lib_1ac3fc0a4a923e29aa814420d285d1fa9c" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string KolibriLib::ConfigurationDir</definition>
        <argsstring></argsstring>
        <name>ConfigurationDir</name>
        <qualifiedname>KolibriLib::ConfigurationDir</qualifiedname>
        <initializer>= &quot;/kolibrios/etc/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" line="14" column="23" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1ae42aab2f9795e3359fb723ff5820250c" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string KolibriLib::ImgDir</definition>
        <argsstring></argsstring>
        <name>ImgDir</name>
        <qualifiedname>KolibriLib::ImgDir</qualifiedname>
        <initializer>= ConfigurationDir + &quot;images/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" line="16" column="23" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1ab1099de2131804416562ef820927ca2b" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string KolibriLib::DefaultImage</definition>
        <argsstring></argsstring>
        <name>DefaultImage</name>
        <qualifiedname>KolibriLib::DefaultImage</qualifiedname>
        <initializer>= ImgDir + &quot;default.png&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" line="18" column="23" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1aa47d5ef524ec6197866199e1522047c6" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string KolibriLib::CursorsDir</definition>
        <argsstring></argsstring>
        <name>CursorsDir</name>
        <qualifiedname>KolibriLib::CursorsDir</qualifiedname>
        <initializer>= ConfigurationDir + &quot;cursors/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" line="20" column="23" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/small.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespace_kolibri_lib_1aadbd1982a31f43cb6e1e70dafc4edb48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">UI::Size</ref></type>
        <definition>UI::Size KolibriLib::GetScreenSize</definition>
        <argsstring>()</argsstring>
        <name>GetScreenSize</name>
        <qualifiedname>KolibriLib::GetScreenSize</qualifiedname>
        <briefdescription>
<para>Получить разрешение экрана </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>размер экрана </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/graphic/screen.hpp" line="15" column="17" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/graphic/screen.hpp" bodystart="15" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespace_kolibri_lib_1acd69b39f323a74739838c3cfd62bec7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_kolibri_lib_1_1_thread_1ac583b7a88e5bddeab393a41bf9929c51" kindref="member">Thread::Slot</ref></type>
        <definition>Thread::Slot KolibriLib::ScreenPointAffiliation</definition>
        <argsstring>(UI::Coord POINT)</argsstring>
        <name>ScreenPointAffiliation</name>
        <qualifiedname>KolibriLib::ScreenPointAffiliation</qualifiedname>
        <param>
          <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">UI::Coord</ref></type>
          <declname>POINT</declname>
        </param>
        <briefdescription>
<para>Получить принадлежность точки </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>POINT</parametername>
</parameternamelist>
<parameterdescription>
<para>точка на экране </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>слот окна которому принадлежит точка </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/graphic/screen.hpp" line="24" column="21" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/graphic/screen.hpp" bodystart="24" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespace_kolibri_lib_1a79cea121a31a0a2da904f088c3484802" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KolibriLib::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <qualifiedname>KolibriLib::init</qualifiedname>
        <briefdescription>
<para>инициализация библиотеки </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/init.hpp" line="22" column="13" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/init.hpp" bodystart="22" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespace_kolibri_lib_1ab8a227d1c51a256a87817fdf1c37a24c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KolibriLib::Wait</definition>
        <argsstring>(int time)</argsstring>
        <name>Wait</name>
        <qualifiedname>KolibriLib::Wait</qualifiedname>
        <param>
          <type>int</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Подождать </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>время задержки(в 1/100 секунды) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/system/thread.hpp" line="11" column="17" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/system/thread.hpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_kolibri_lib_1a5538a86d3c38c7c88391e9360e01d023" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KolibriLib::Wait</definition>
        <argsstring>()</argsstring>
        <name>Wait</name>
        <qualifiedname>KolibriLib::Wait</qualifiedname>
        <briefdescription>
<para>Подождать, минимальное кол-во времени </para>
        </briefdescription>
        <detaileddescription>
<sect4 id="namespace_kolibri_lib_1_1_u_i_1_1text_1Функция">
<title>устанавливает курсор в середину экрана</title></sect4>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/system/thread.hpp" line="18" column="17" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/system/thread.hpp" bodystart="18" bodyend="21"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Основное пространство имён </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Egor00f </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/childWindow.hpp" line="19" column="1"/>
  </compounddef>
</doxygen>
