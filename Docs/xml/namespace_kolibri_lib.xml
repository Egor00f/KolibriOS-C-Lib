<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespace_kolibri_lib" kind="namespace" language="C++">
    <compoundname>KolibriLib</compoundname>
    <innerclass refid="struct_kolibri_lib_1_1point" prot="public">KolibriLib::point</innerclass>
    <innernamespace refid="namespace_kolibri_lib_1_1child_window">KolibriLib::childWindow</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_color">KolibriLib::Color</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1filesystem">KolibriLib::filesystem</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1graphic">KolibriLib::graphic</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1mouse">KolibriLib::mouse</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_network">KolibriLib::Network</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_o_s">KolibriLib::OS</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_thread">KolibriLib::Thread</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1_u_i">KolibriLib::UI</innernamespace>
    <innernamespace refid="namespace_kolibri_lib_1_1window">KolibriLib::window</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_kolibri_lib_1ac5af83599c636badfe90db73a654f5ef" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KolibriLib::EXIT</definition>
        <argsstring></argsstring>
        <name>EXIT</name>
        <qualifiedname>KolibriLib::EXIT</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Сообщение всем функциям что нужно завершать работу </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" line="12" column="10" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1ae00feeea6bd20648e94c82f1289bc68f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int KolibriLib::EXITCODE</definition>
        <argsstring></argsstring>
        <name>EXITCODE</name>
        <qualifiedname>KolibriLib::EXITCODE</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Код ошибки </para>
        </briefdescription>
        <detaileddescription>
<sect4 id="namespace_kolibri_lib_1int">
<title>main(){/*...*<zwj/>/ return EXITCODE; }</title></sect4>
<sect4 id="namespace_kolibri_lib_1_1_u_i_1_1buttons_1Эта">
<title>функция может выполнятся очень долго, если вы уже создали довольно много кнопок. Это становится действительно важно когда у вас объявленно более 2000 кнопок</title></sect4>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" line="16" column="9" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1a801243d32a292f3efe76b200958e4056" prot="public" static="no" mutable="no">
        <type>const ::std::string</type>
        <definition>const ::std::string KolibriLib::ConfigurationDir</definition>
        <argsstring></argsstring>
        <name>ConfigurationDir</name>
        <qualifiedname>KolibriLib::ConfigurationDir</qualifiedname>
        <initializer>= &quot;/kolibrios/etc/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" line="18" column="25" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1a9fbe3d2f36c49d650f4c1d13d3c80b16" prot="public" static="no" mutable="no">
        <type>const ::std::string</type>
        <definition>const ::std::string KolibriLib::ImgDir</definition>
        <argsstring></argsstring>
        <name>ImgDir</name>
        <qualifiedname>KolibriLib::ImgDir</qualifiedname>
        <initializer>= ConfigurationDir + &quot;images/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" line="20" column="25" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1ad6c03af439a8e649a784524af06bf036" prot="public" static="no" mutable="no">
        <type>const ::std::string</type>
        <definition>const ::std::string KolibriLib::DefaultImage</definition>
        <argsstring></argsstring>
        <name>DefaultImage</name>
        <qualifiedname>KolibriLib::DefaultImage</qualifiedname>
        <initializer>= ImgDir + &quot;default.png&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" line="22" column="25" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_kolibri_lib_1a2af82cbcfd2b422395c7a557bc3e4420" prot="public" static="no" mutable="no">
        <type>const ::std::string</type>
        <definition>const ::std::string KolibriLib::CursorsDir</definition>
        <argsstring></argsstring>
        <name>CursorsDir</name>
        <qualifiedname>KolibriLib::CursorsDir</qualifiedname>
        <initializer>= ConfigurationDir + &quot;cursors/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" line="24" column="25" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/small.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespace_kolibri_lib_1a79cea121a31a0a2da904f088c3484802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KolibriLib::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <qualifiedname>KolibriLib::init</qualifiedname>
        <briefdescription>
<para>инициализация </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/base.hpp" line="21" column="10" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/base.hpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespace_kolibri_lib_1a56a5ef2333e7fe22f558aaa6c9276b7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KolibriLib::Wait</definition>
        <argsstring>(unsigned int time)</argsstring>
        <name>Wait</name>
        <qualifiedname>KolibriLib::Wait</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Подождать </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>время задержки(в 1/100 секунды) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/os.hpp" line="92" column="17" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/os.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespace_kolibri_lib_1a8ef3c016e993ed0a7c2d110d4adae88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; unsigned &gt;</type>
        <definition>point&lt; unsigned &gt; KolibriLib::GetScreenSize</definition>
        <argsstring>()</argsstring>
        <name>GetScreenSize</name>
        <qualifiedname>KolibriLib::GetScreenSize</qualifiedname>
        <briefdescription>
<para>Получить разрешение экрана </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>размер экрана </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/screen.hpp" line="14" column="11" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/screen.hpp" bodystart="14" bodyend="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Основное пространство имён </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Egor00f </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/base.hpp" line="17" column="1"/>
  </compounddef>
</doxygen>
