<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="ru">
  <compounddef id="struct_kolibri_lib_1_1point" kind="struct" language="C++" prot="public">
    <compoundname>KolibriLib::point</compoundname>
    <includes refid="types_8hpp" local="no">types.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_kolibri_lib_1_1point_1add46882563c402c224b23c85049f7f34" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T KolibriLib::point&lt; T &gt;::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>KolibriLib::point::x</qualifiedname>
        <briefdescription>
<para>координата по оси X, или ширина </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="16" column="11" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_kolibri_lib_1_1point_1a2552f28a0a4bd6d41b0b75c7e3dec4e0" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T KolibriLib::point&lt; T &gt;::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>KolibriLib::point::y</qualifiedname>
        <briefdescription>
<para>координата по оси Y, или высота </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="18" column="11" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1aa3ef97fd19ba3b0935c2ed0ae5f9e55d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KolibriLib::point&lt; T &gt;::point</definition>
        <argsstring>(T X=(T) 0, T Y=(T) 0)</argsstring>
        <name>point</name>
        <qualifiedname>KolibriLib::point::point</qualifiedname>
        <param>
          <type>T</type>
          <declname>X</declname>
          <defval>(T) 0</defval>
        </param>
        <param>
          <type>T</type>
          <declname>Y</declname>
          <defval>(T) 0</defval>
        </param>
        <briefdescription>
<para>Конструктор </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para><linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="23" column="9" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a2e4751aebabf649201893564603c925d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KolibriLib::point&lt; T &gt;::point</definition>
        <argsstring>(float f)</argsstring>
        <name>point</name>
        <qualifiedname>KolibriLib::point::point</qualifiedname>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Точка как отношение x/y. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Десятичная дробь, которая ≈ x/y </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="27" column="9" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="87" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a7a35c1c2e7a7ec711c4ea463a874be8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ksys_pos_t</type>
        <definition>ksys_pos_t KolibriLib::point&lt; T &gt;::GetKsysPost</definition>
        <argsstring>() const</argsstring>
        <name>GetKsysPost</name>
        <qualifiedname>KolibriLib::point::GetKsysPost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="29" column="20" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1ae65636000dd6c32db0b20ef4be4b46b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
        <definition>KolibriLib::point&lt; T &gt; &amp; KolibriLib::point&lt; T &gt;::operator+</definition>
        <argsstring>(const point&lt; T &gt; &amp;a)</argsstring>
        <name>operator+</name>
        <qualifiedname>KolibriLib::point::operator+</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="31" column="15" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1abdf5f9fe3cdc00d45291a1eca4b88218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
        <definition>KolibriLib::point&lt; T &gt; &amp; KolibriLib::point&lt; T &gt;::operator-</definition>
        <argsstring>(const point&lt; T &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <qualifiedname>KolibriLib::point::operator-</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="32" column="15" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a4cc022aa1df6376d76b4c0a6102ea92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
        <definition>KolibriLib::point&lt; T &gt; &amp; KolibriLib::point&lt; T &gt;::operator=</definition>
        <argsstring>(const point&lt; T &gt; &amp;p)</argsstring>
        <name>operator=</name>
        <qualifiedname>KolibriLib::point::operator=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="37" column="15" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a0891cef00565f4ca0844407aa83f96fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
        <definition>KolibriLib::point&lt; T &gt; &amp; KolibriLib::point&lt; T &gt;::operator+=</definition>
        <argsstring>(const T &amp;p)</argsstring>
        <name>operator+=</name>
        <qualifiedname>KolibriLib::point::operator+=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Прибавить к обоим кординатам значение </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="43" column="15" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a686832ea1ce3658590ba27bce10d0493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
        <definition>KolibriLib::point&lt; T &gt; &amp; KolibriLib::point&lt; T &gt;::operator-=</definition>
        <argsstring>(const T &amp;p)</argsstring>
        <name>operator-=</name>
        <qualifiedname>KolibriLib::point::operator-=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="45" column="15" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="160" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a23f4ec164215682c1eb705f6b5db8918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
        <definition>KolibriLib::point&lt; T &gt; &amp; KolibriLib::point&lt; T &gt;::operator*=</definition>
        <argsstring>(const T &amp;p)</argsstring>
        <name>operator*=</name>
        <qualifiedname>KolibriLib::point::operator*=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="47" column="15" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a7c076a4ec59ecd602763d1751bcea185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
        <definition>KolibriLib::point&lt; T &gt; &amp; KolibriLib::point&lt; T &gt;::operator/=</definition>
        <argsstring>(const T &amp;p)</argsstring>
        <name>operator/=</name>
        <qualifiedname>KolibriLib::point::operator/=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="49" column="15" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1aea6b20f0975274a5564bfe12945d5bd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KolibriLib::point&lt; T &gt;::operator==</definition>
        <argsstring>(const point&lt; T &gt; &amp;a) const</argsstring>
        <name>operator==</name>
        <qualifiedname>KolibriLib::point::operator==</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="54" column="14" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a5a2c05ea1ae850ba4cf0446239afe669" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KolibriLib::point&lt; T &gt;::operator!=</definition>
        <argsstring>(const point&lt; T &gt; &amp;a) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>KolibriLib::point::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="60" column="14" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="190" bodyend="193"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Просто точка </para>
    </briefdescription>
    <detaileddescription>
<sect4 id="struct_kolibri_lib_1_1point_1Если">
<title>необходимо использовать конкретный теип данных для точки используйте шаблоны. Например: point&lt;uint64_t&gt; p;</title></sect4>
    </detaileddescription>
    <location file="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="13" column="5" bodyfile="F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="14" bodyend="61"/>
    <listofallmembers>
      <member refid="struct_kolibri_lib_1_1point_1a7a35c1c2e7a7ec711c4ea463a874be8c" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>GetKsysPost</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a5a2c05ea1ae850ba4cf0446239afe669" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator!=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a23f4ec164215682c1eb705f6b5db8918" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator*=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1ae65636000dd6c32db0b20ef4be4b46b5" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator+</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a0891cef00565f4ca0844407aa83f96fe" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator+=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1abdf5f9fe3cdc00d45291a1eca4b88218" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator-</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a686832ea1ce3658590ba27bce10d0493" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator-=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a7c076a4ec59ecd602763d1751bcea185" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator/=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a4cc022aa1df6376d76b4c0a6102ea92e" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1aea6b20f0975274a5564bfe12945d5bd1" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator==</name></member>
      <member refid="struct_kolibri_lib_1_1point_1aa3ef97fd19ba3b0935c2ed0ae5f9e55d" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>point</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a2e4751aebabf649201893564603c925d" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>point</name></member>
      <member refid="struct_kolibri_lib_1_1point_1add46882563c402c224b23c85049f7f34" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>x</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a2552f28a0a4bd6d41b0b75c7e3dec4e0" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
