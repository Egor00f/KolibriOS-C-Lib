<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="ru">
  <compounddef id="struct_kolibri_lib_1_1point" kind="struct" language="C++" prot="public">
    <compoundname>KolibriLib::point</compoundname>
    <includes refid="types_8hpp" local="no">types.hpp</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_kolibri_lib_1_1point_1aba63dd75453b02a799b9cd6ae5773cfe" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int KolibriLib::point::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>KolibriLib::point::x</qualifiedname>
        <briefdescription>
<para>координата по оси X, или ширина </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="20" column="5" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_kolibri_lib_1_1point_1a92d76b1b7cb1eabab7bc3916b6341a24" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int KolibriLib::point::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>KolibriLib::point::y</qualifiedname>
        <briefdescription>
<para>координата по оси Y, или высота </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="22" column="5" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a265a991978495b66d5cf24346e975bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KolibriLib::point::point</definition>
        <argsstring>(int X=0, int Y=0)</argsstring>
        <name>point</name>
        <qualifiedname>KolibriLib::point::point</qualifiedname>
        <param>
          <type>int</type>
          <declname>X</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>Y</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Конструктор </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para><linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a088398ffb8097c6a7cde98e29ee6b37d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KolibriLib::point::point</definition>
        <argsstring>(float f)</argsstring>
        <name>point</name>
        <qualifiedname>KolibriLib::point::point</qualifiedname>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Точка как отношение x/y. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Десятичная дробь, которая ≈ x/y </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a5793d267b2ffe963e707462c52ea0df6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ksys_pos_t</type>
        <definition>ksys_pos_t KolibriLib::point::GetKsysPost</definition>
        <argsstring>() const</argsstring>
        <name>GetKsysPost</name>
        <qualifiedname>KolibriLib::point::GetKsysPost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="33" column="12"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a5e425e06ef75af6eed2e2de6b926e6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; KolibriLib::point::operator+</definition>
        <argsstring>(const point &amp;a)</argsstring>
        <name>operator+</name>
        <qualifiedname>KolibriLib::point::operator+</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="35" column="7"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a5ba2b89dd621a47930656480136266d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; KolibriLib::point::operator-</definition>
        <argsstring>(const point &amp;a)</argsstring>
        <name>operator-</name>
        <qualifiedname>KolibriLib::point::operator-</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="36" column="7"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a8128ee0637bb637b9ebc243ee13fea16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; KolibriLib::point::operator=</definition>
        <argsstring>(const point &amp;p)</argsstring>
        <name>operator=</name>
        <qualifiedname>KolibriLib::point::operator=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="41" column="7"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a3fe3cb1645f178a4274fc8e8048e275a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; KolibriLib::point::operator+=</definition>
        <argsstring>(const int &amp;p)</argsstring>
        <name>operator+=</name>
        <qualifiedname>KolibriLib::point::operator+=</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Прибавить к обоим кординатам значение </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="47" column="7"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a873dd96a1802068c49dd0785555fd95a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; KolibriLib::point::operator-=</definition>
        <argsstring>(const int &amp;p)</argsstring>
        <name>operator-=</name>
        <qualifiedname>KolibriLib::point::operator-=</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="49" column="7"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a42b4f936d5803c7ac214c2d54aa0fe4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; KolibriLib::point::operator*=</definition>
        <argsstring>(const int &amp;p)</argsstring>
        <name>operator*=</name>
        <qualifiedname>KolibriLib::point::operator*=</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="51" column="7"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1aaf9e029a21318ad2fffb9c3b3aa6c48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; KolibriLib::point::operator/=</definition>
        <argsstring>(const int &amp;p)</argsstring>
        <name>operator/=</name>
        <qualifiedname>KolibriLib::point::operator/=</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="53" column="7"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a7407c78217e0395f96a88692e8cf7421" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KolibriLib::point::operator==</definition>
        <argsstring>(const point &amp;a) const</argsstring>
        <name>operator==</name>
        <qualifiedname>KolibriLib::point::operator==</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="58" column="6"/>
      </memberdef>
      <memberdef kind="function" id="struct_kolibri_lib_1_1point_1a065d56469c375a2912116f4e7a1c1a2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KolibriLib::point::operator!=</definition>
        <argsstring>(const point &amp;a) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>KolibriLib::point::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="struct_kolibri_lib_1_1point" kindref="compound">point</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="64" column="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Просто точка </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" line="17" column="1" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp" bodystart="18" bodyend="65"/>
    <listofallmembers>
      <member refid="struct_kolibri_lib_1_1point_1a5793d267b2ffe963e707462c52ea0df6" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>GetKsysPost</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a065d56469c375a2912116f4e7a1c1a2d" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator!=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a42b4f936d5803c7ac214c2d54aa0fe4c" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator*=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a5e425e06ef75af6eed2e2de6b926e6d8" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator+</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a3fe3cb1645f178a4274fc8e8048e275a" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator+=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a5ba2b89dd621a47930656480136266d9" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator-</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a873dd96a1802068c49dd0785555fd95a" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator-=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1aaf9e029a21318ad2fffb9c3b3aa6c48b" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator/=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a8128ee0637bb637b9ebc243ee13fea16" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator=</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a7407c78217e0395f96a88692e8cf7421" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>operator==</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a265a991978495b66d5cf24346e975bfc" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>point</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a088398ffb8097c6a7cde98e29ee6b37d" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>point</name></member>
      <member refid="struct_kolibri_lib_1_1point_1aba63dd75453b02a799b9cd6ae5773cfe" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>x</name></member>
      <member refid="struct_kolibri_lib_1_1point_1a92d76b1b7cb1eabab7bc3916b6341a24" prot="public" virt="non-virtual"><scope>KolibriLib::point</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
