<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="ru">
  <compounddef id="kolibri__msgbox_8h" kind="file" language="C++">
    <compoundname>kolibri_msgbox.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h</label>
        <link refid="kolibri__msgbox_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdarg.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="kolibri__msgbox_8h_1a9a4ca03838f75a3cb167860308c7a444" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* msgbox_callback) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>msgbox_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="15" column="9" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" bodystart="15" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="kolibri__msgbox_8h_1a9976a6476044d5ef24d9ec5988ef1059" prot="public" static="no" mutable="no">
        <type></type>
        <definition>msgbox</definition>
        <argsstring></argsstring>
        <name>msgbox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="12" column="2" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="kolibri__msgbox_8h_1afce25c30e3e0f86a14c4bf308758788c" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int msgbox_inited</definition>
        <argsstring></argsstring>
        <name>msgbox_inited</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="17" column="12" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="kolibri__msgbox_8h_1a68a7e42106fb86df13bd64b4837b09e0" prot="public" static="no" extern="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* msgbox_create) (msgbox *, void *thread) __attribute__((__stdcall__))</definition>
        <argsstring>)(msgbox *, void *thread) __attribute__((__stdcall__))</argsstring>
        <name>msgbox_create</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="19" column="8" declfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" declline="19" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="kolibri__msgbox_8h_1a898539dbb132bfbe8e96859ce7d16168" prot="public" static="no" extern="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* msgbox_setfunctions) (msgbox_callback *) __attribute__((__stdcall__))</definition>
        <argsstring>)(msgbox_callback *) __attribute__((__stdcall__))</argsstring>
        <name>msgbox_setfunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="20" column="8" declfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" declline="20" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="kolibri__msgbox_8h_1aa5689e013f298491f1956e0037a74326" prot="public" static="no" extern="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* msgbox_reinit) (msgbox *) __attribute__((__stdcall__))</definition>
        <argsstring>)(msgbox *) __attribute__((__stdcall__))</argsstring>
        <name>msgbox_reinit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="21" column="8" declfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" declline="21" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="kolibri__msgbox_8h_1ad09246453a4dabd919c7541484046a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>struct __attribute__</definition>
        <argsstring>((__packed__))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(__packed__)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="1" column="0" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" bodystart="6" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="kolibri__msgbox_8h_1a29d02e30c5a50ea57759fdff39852e86" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kolibri_msgbox_init</definition>
        <argsstring>()</argsstring>
        <name>kolibri_msgbox_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="18" column="13" declfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="kolibri__msgbox_8h_1a074e8a34871589eae0adb005a9f6a044" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>msgbox *</type>
        <definition>static msgbox * kolibri_new_msgbox</definition>
        <argsstring>(char *title, char *text, int def_but,...)</argsstring>
        <name>kolibri_new_msgbox</name>
        <param>
          <type>char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>def_but</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>text can be multilined by code 13 = &quot;\r&quot; def_but - highlighted and used on Enter (if zero - default is [X]), user may use Tabs or Arrows last params are buttons text, max 8. last must set as NULL </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="23" column="22" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" bodystart="23" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="kolibri__msgbox_8h_1a963336b1a1a09663b8c6d0679df4e419" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kolibri_start_msgbox</definition>
        <argsstring>(msgbox *box, msgbox_callback cb[])</argsstring>
        <name>kolibri_start_msgbox</name>
        <param>
          <type>msgbox *</type>
          <declname>box</declname>
        </param>
        <param>
          <type>msgbox_callback</type>
          <declname>cb</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" line="53" column="20" bodyfile="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h" bodystart="53" bodyend="62"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>KOLIBRI_MSGBOX_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOLIBRI_MSGBOX_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__attribute__<sp/>((__packed__))<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/>retval;<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>-<sp/>win<sp/>closed,<sp/>1<sp/>to<sp/>n<sp/>-<sp/>button<sp/>num,<sp/>also<sp/>default<sp/>button<sp/>on<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/>reserv;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texts[2048];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>enough<sp/>;-)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgbox_stack[1024];</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/>top_stack;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}<sp/>msgbox;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*msgbox_callback)(void);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgbox_inited;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kolibri_msgbox_init();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void<sp/>(*msgbox_create)(msgbox<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*thread)<sp/>__attribute__((__stdcall__));<sp/></highlight><highlight class="comment">//<sp/>clears<sp/>callbacks,<sp/>!<sp/>if<sp/>fix<sp/>lib,<sp/>we<sp/>can<sp/>return<sp/>eax<sp/>as<sp/>of<sp/>Fn51</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void<sp/>(*msgbox_setfunctions)(msgbox_callback*)<sp/>__attribute__((__stdcall__));<sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>called<sp/>immediately<sp/>after<sp/>create,<sp/>zero-ended<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void<sp/>(*msgbox_reinit)(msgbox<sp/>*)<sp/>__attribute__((__stdcall__));<sp/><sp/></highlight><highlight class="comment">//<sp/>recalc<sp/>sizes<sp/>when<sp/>structure<sp/>changes,<sp/>called<sp/>auto<sp/>when<sp/>MsgBoxCreate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>msgbox*<sp/>kolibri_new_msgbox(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>title,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>def_but,<sp/>...)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>vl;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(vl,<sp/>def_but);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>msgbox*<sp/>box<sp/>=<sp/>calloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msgbox),<sp/>1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>box-&gt;retval<sp/>=<sp/>(uint8_t)def_but;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*pc<sp/>=<sp/>box-&gt;texts;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(pc,<sp/>title);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>pc<sp/>+=<sp/>strlen(title)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(pc,<sp/>text);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>pc<sp/>+=<sp/>strlen(text)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*but_text<sp/>=<sp/>va_arg(vl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(but_text)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(pc,<sp/>but_text);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc<sp/>+=<sp/>strlen(but_text)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(pc<sp/>-<sp/>box-&gt;texts<sp/>&lt;<sp/>sizeof<sp/>box-&gt;texts);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but_text<sp/>=<sp/>va_arg(vl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(vl);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>box;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kolibri_start_msgbox(msgbox*<sp/>box,<sp/>msgbox_callback<sp/>cb[])</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!msgbox_inited)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kolibri_msgbox_init();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgbox_inited++;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>(*msgbox_create)(box,<sp/>&amp;box-&gt;top_stack);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cb)<sp/>(*msgbox_setfunctions)(cb);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h"/>
  </compounddef>
</doxygen>
