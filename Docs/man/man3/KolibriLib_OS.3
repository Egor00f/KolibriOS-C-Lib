.TH "KolibriLib::OS" 3 "KolibriLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KolibriLib::OS \- Работа с системой  

.SH SYNOPSIS
.br
.PP
.SS "Определения типов"

.in +1c
.ti -1c
.RI "typedef unsigned int \fBEvent\fP"
.br
.RI "Ивент "
.ti -1c
.RI "typedef ksys_time_t \fBTime\fP"
.br
.in -1c
.SS "Перечисления"

.in +1c
.ti -1c
.RI "enum \fBEvents\fP { \fBNone\fP = KSYS_EVENT_NONE, \fBRedraw\fP = KSYS_EVENT_REDRAW, \fBButton\fP = KSYS_EVENT_BUTTON, \fBMouse\fP = KSYS_EVENT_MOUSE, \fBKey\fP = KSYS_EVENT_KEY, \fBDesktop\fP = KSYS_EVENT_DESKTOP, \fBDebug\fP = KSYS_EVENT_DEBUG, \fBExit\fP }"
.br
.ti -1c
.RI "enum \fBlang\fP { \fBEng\fP = 0, \fBFi\fP, \fBGer\fP, \fBRus\fP }"
.br
.RI "Список языков системы "
.in -1c
.SS "Функции"

.in +1c
.ti -1c
.RI "\fBColors::ColorsTable\fP \fBGetSystemColors\fP ()"
.br
.RI "Получить системные цвета "
.ti -1c
.RI "\fBEvent\fP \fBWaitEvent\fP ()"
.br
.RI "Ждать ивента "
.ti -1c
.RI "\fBEvent\fP \fBWaitEvent\fP (uint32_t TimeOut=0)"
.br
.RI "Ждать ивента "
.ti -1c
.RI "\fBEvent\fP \fBCheckEvent\fP ()"
.br
.RI "Проверить пришёл ли ли ивент "
.ti -1c
.RI "int \fBExec\fP (const \fBfilesystem::Path\fP &AppName, const std::string &args)"
.br
.RI "Запустить программу "
.ti -1c
.RI "Time \fBGetTime\fP ()"
.br
.RI "Получить системное время "
.ti -1c
.RI "bool \fBSpeakerStatus\fP ()"
.br
.RI "Получить состояние спикера(Вкл/выкл) "
.ti -1c
.RI "void \fBSpeakerSwitch\fP ()"
.br
.RI "Переключить состояние спикера "
.ti -1c
.RI "std::size_t \fBFreeMem\fP ()"
.br
.RI "получить кол-во свободной памяти "
.ti -1c
.RI "std::size_t \fBAllMem\fP ()"
.br
.RI "Получить кол-во всей памяти "
.ti -1c
.RI "int \fBGetLang\fP ()"
.br
.RI "Получить язык системы "
.in -1c
.SS "Переменные"

.in +1c
.ti -1c
.RI "\fBColors::ColorsTable\fP \fBsys_color_table\fP"
.br
.RI "Таблица стандартных(системных) цветов "
.in -1c
.SH "Подробное описание"
.PP 
Работа с системой 
.SH "Перечисления"
.PP 
.SS "enum \fBKolibriLib::OS::Events\fP"

.PP
\fBЭлементы перечислений\fP
.in +1c
.TP
\fB\fINone \fP\fP
Ивента небыло 
.TP
\fB\fIRedraw \fP\fP
Перересовка окна 
.TP
\fB\fIButton \fP\fP
Нажата кнопка 
.TP
\fB\fIMouse \fP\fP
Активность мыши 
.TP
\fB\fIKey \fP\fP
Активность со стороны клавиатуры 
.TP
\fB\fIExit \fP\fP
Выход 
.SS "что пользователь нажал кнопку X"

.SS "enum \fBKolibriLib::OS::lang\fP"

.PP
Список языков системы 
.SS "жаль что так мало языков поддерживается\&.\&.\&."

.PP
\fBЭлементы перечислений\fP
.in +1c
.TP
\fB\fIEng \fP\fP
Английский 
.TP
\fB\fIFi \fP\fP
Финский 
.TP
\fB\fIGer \fP\fP
Немецкий 
.TP
\fB\fIRus \fP\fP
Русский 
.SH "Функции"
.PP 
.SS "std::size_t KolibriLib::OS::AllMem ()\fR [inline]\fP"

.PP
Получить кол-во всей памяти 
.PP
\fBВозвращает\fP
.RS 4
Размер всей памяти в килобайтах 
.RE
.PP

.SS "\fBEvent\fP KolibriLib::OS::CheckEvent ()\fR [inline]\fP"

.PP
Проверить пришёл ли ли ивент 
.PP
\fBВозвращает\fP
.RS 4
Ивент 
.RE
.PP

.SS "int KolibriLib::OS::Exec (const \fBfilesystem::Path\fP & AppName, const std::string & args)"

.PP
Запустить программу 
.PP
\fBАргументы\fP
.RS 4
\fIAppName\fP Полное имя исполняемого файла 
.br
\fIargs\fP аргументы\&. Максимум 256 символов 
.RE
.PP
\fBВозвращает\fP
.RS 4
> 0 - программа загружена, eax содержит PID, < 0 если исполняемы файл не найден 
.RE
.PP

.SS "std::size_t KolibriLib::OS::FreeMem ()\fR [inline]\fP"

.PP
получить кол-во свободной памяти 
.PP
\fBВозвращает\fP
.RS 4
размер свободной памяти в килобайтах 
.RE
.PP

.SS "int KolibriLib::OS::GetLang ()\fR [inline]\fP"

.PP
Получить язык системы 
.PP
\fBВозвращает\fP
.RS 4
Занечение из списка \fBlang\fP
.RE
.PP

.SS "\fBColors::ColorsTable\fP KolibriLib::OS::GetSystemColors ()"

.PP
Получить системные цвета 
.SS "устанавливает курсор в середину экрана"
\fBВозвращает\fP
.RS 4
Таблица системных цветов 
.RE
.PP

.SS "Time KolibriLib::OS::GetTime ()\fR [inline]\fP"

.PP
Получить системное время 
.PP
\fBВозвращает\fP
.RS 4

.RE
.PP

.SS "bool KolibriLib::OS::SpeakerStatus ()\fR [inline]\fP"

.PP
Получить состояние спикера(Вкл/выкл) 
.PP
\fBВозвращает\fP
.RS 4
true если спикер разрешён, иначе false 
.RE
.PP

.SS "\fBEvent\fP KolibriLib::OS::WaitEvent ()\fR [inline]\fP"

.PP
Ждать ивента 
.PP
\fBВозвращает\fP
.RS 4
Ивент 
.RE
.PP

.SS "\fBOS::Event\fP KolibriLib::OS::WaitEvent (uint32_t TimeOut = \fR0\fP)"

.PP
Ждать ивента 
.PP
\fBАргументы\fP
.RS 4
\fIТаймаут\fP (в 1/100 секунды), время сколько ждать 
.RE
.PP
\fBВозвращает\fP
.RS 4
Ивент 
.RE
.PP

.SH "Автор"
.PP 
Автоматически создано Doxygen для KolibriLib из исходного текста\&.
