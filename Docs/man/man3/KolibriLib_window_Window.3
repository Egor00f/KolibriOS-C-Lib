.TH "KolibriLib::window::Window" 3 "KolibriLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KolibriLib::window::Window \- Класс для работы с окном  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <window\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWindow\fP (const std::string &Title='Window', const \fBUI::Size\fP &size=\fBDefaultWindowSize\fP, const \fBColors::ColorsTable\fP &colors=\fBColors::DefaultColorTable\fP, const \fBColors::Color\fP &TitleColor=OS::sys_color_table\&.work_text, bool Resize=false, bool RealtimeReadraw=false, bool Gradient=false, unsigned Transparency=0, const unsigned &Margin=0)"
.br
.RI "Конструктор "
.ti -1c
.RI "void \fBRedraw\fP ()"
.br
.ti -1c
.RI "void \fBRender\fP ()"
.br
.RI "Отрисовать окно "
.ti -1c
.RI "unsigned \fBGetMargin\fP ()"
.br
.RI "Получить рамер отступов в этом окне "
.ti -1c
.RI "\fBUI::Size\fP \fBGetSize\fP ()"
.br
.RI "Получить размер окна "
.ti -1c
.RI "void \fBSetWindowColors\fP (const \fBColors::ColorsTable\fP &colorTable)"
.br
.RI "Задать стандартные цвета окна "
.ti -1c
.RI "void \fBStartRedraw\fP ()"
.br
.RI "Начать перересовку окна "
.ti -1c
.RI "void \fBEndRedraw\fP ()"
.br
.RI "Закончить перересовку окна "
.ti -1c
.RI "void \fBDrawWindow\fP (\fBUI::Coord\fP coord=\fBmouse::GetMousePositionOnSreen\fP())"
.br
.RI "Отрисовать окно "
.ti -1c
.RI "void \fBChangeWindow\fP (\fBUI::Coord\fP coord, \fBUI::Size\fP size)"
.br
.RI "Изменить окно "
.ti -1c
.RI "void \fBChangeTilte\fP (const std::string &newTitle)"
.br
.RI "Изменить заголовок окна "
.ti -1c
.RI "\fBUI::Size\fP \fBGetWindowSize\fP ()"
.br
.RI "Получить размер окна "
.ti -1c
.RI "void \fBDeleteElement\fP (unsigned id)"
.br
.RI "Удалить элемент "
.ti -1c
.RI "\fBOS::Event\fP \fBHandler\fP ()"
.br
.RI "Обработчик окна "
.ti -1c
.RI "UI::buttons::ButtonID \fBGetPressedButton\fP ()"
.br
.RI "Проверить какая нажата "
.ti -1c
.RI "std::string \fBGetInputFromFrom\fP (unsigned form)"
.br
.RI "Получить текст введённый в форму "
.ti -1c
.RI "template<class T > unsigned \fBAddElement\fP (const T &element)"
.br
.RI "Добавить UI элемент "
.ti -1c
.RI "template<class T > void \fBSetElement\fP (unsigned i, const T &element)"
.br
.RI "Изменить элемент tparam T\&. "
.ti -1c
.RI "template<class T > T \fBGetElement\fP (unsigned i) const"
.br
.ti -1c
.RI "void \fBUnfocus\fP () const"
.br
.RI "Снять фокус с этого окна "
.ti -1c
.RI "void \fBFocus\fP () const"
.br
.RI "Поставить фокус на это окно "
.in -1c
.SH "Detailed Description"
.PP 
Класс для работы с окном 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Window::Window (const std::string & Title = \fR'Window'\fP, const \fBUI::Size\fP & size = \fR\fBDefaultWindowSize\fP\fP, const \fBColors::ColorsTable\fP & colors = \fR\fBColors::DefaultColorTable\fP\fP, const \fBColors::Color\fP & TitleColor = \fROS::sys_color_table\&.work_text\fP, bool Resize = \fRfalse\fP, bool RealtimeReadraw = \fRfalse\fP, bool Gradient = \fRfalse\fP, unsigned Transparency = \fR0\fP, const unsigned & Margin = \fR0\fP)"

.PP
Конструктор 
.PP
\fBParameters\fP
.RS 4
\fITitle\fP Заголовок окна 
.br
\fIsize\fP Размер окна 
.br
\fIstyle\fP стиль окна 
.br
\fIcolors\fP Цвет окна 
.br
\fIMargin\fP Отступы 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<class T > unsigned Window::AddElement (const T & element)"

.PP
Добавить UI элемент 
.PP
\fBParameters\fP
.RS 4
\fIelement\fP 
.RE
.PP

.SS "void Window::ChangeTilte (const std::string & newTitle)"

.PP
Изменить заголовок окна 
.PP
\fBParameters\fP
.RS 4
\fInewTitle\fP новый заголовок 
.RE
.PP

.SS "void Window::ChangeWindow (\fBUI::Coord\fP coord, \fBUI::Size\fP size)"

.PP
Изменить окно 
.PP
\fBParameters\fP
.RS 4
\fIcoord\fP позиция 
.br
\fIsize\fP размер 
.RE
.PP

.SS "void Window::DeleteElement (unsigned id)"

.PP
Удалить элемент 
.PP
\fBParameters\fP
.RS 4
\fIid\fP idшник того элемента, которой нужно удалить 
.RE
.PP

.SS "void KolibriLib::window::Window::DrawWindow (\fBUI::Coord\fP coord = \fR\fBmouse::GetMousePositionOnSreen\fP()\fP)"

.PP
Отрисовать окно 
.PP
\fBParameters\fP
.RS 4
\fIcoord\fP позиция окна 
.br
\fIsize\fP размер окна 
.br
\fItitle\fP титул(текст в заголовке) 
.br
\fIcolor\fP цвет рабочей области 
.br
\fIstyle\fP стиль 
.RE
.PP

.SS "void Window::EndRedraw ()"

.PP
Закончить перересовку окна 
.SS "после должна быть вызвана функция #EndRedraw()"

.SS "template<class T > T KolibriLib::window::Window::GetElement (unsigned i) const"

.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "std::string Window::GetInputFromFrom (unsigned form)"

.PP
Получить текст введённый в форму 
.PP
\fBParameters\fP
.RS 4
\fIform\fP номер формы в списке 
.RE
.PP
\fBReturns\fP
.RS 4
Функция возвращает текст введённый в формы 
.RE
.PP

.SS "unsigned Window::GetMargin ()"

.PP
Получить рамер отступов в этом окне 
.PP
\fBReturns\fP
.RS 4
\fB_MARGIN\fP
.RE
.PP

.SS "\fBUI::Size\fP Window::GetSize ()"

.PP
Получить размер окна 
.PP
\fBReturns\fP
.RS 4
\fB_size\fP
.RE
.PP

.SS "\fBUI::Size\fP Window::GetWindowSize ()"

.PP
Получить размер окна 
.PP
\fBReturns\fP
.RS 4
\fBpoint\&.x\fP - ширина окна, 
.PP
\fBpoint\&.y\fP - высота окна 
.RE
.PP

.SS "\fBOS::Event\fP Window::Handler ()"

.PP
Обработчик окна 
.PP
\fBReturns\fP
.RS 4
Ивент 
.RE
.PP

.SS "template<class T > void KolibriLib::window::Window::SetElement (unsigned i, const T & element)"

.PP
Изменить элемент tparam T\&. 
.PP
\fBParameters\fP
.RS 4
\fIi\fP 
.br
\fIelement\fP 
.RE
.PP

.SS "void Window::SetWindowColors (const \fBColors::ColorsTable\fP & colorTable)"

.PP
Задать стандартные цвета окна 
.PP
\fBParameters\fP
.RS 4
\fIcolorTable\fP таблица цветов 
.RE
.PP

.SS "void Window::StartRedraw ()"

.PP
Начать перересовку окна 
.SS "всё что было нарисованно в окне"
.SS "после должна быть вызвана функция #EndRedraw()"


.SH "Author"
.PP 
Generated automatically by Doxygen for KolibriLib from the source code\&.
