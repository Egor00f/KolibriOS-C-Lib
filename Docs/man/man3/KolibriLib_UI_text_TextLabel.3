.TH "KolibriLib::UI::text::TextLabel" 3 "KolibriLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KolibriLib::UI::text::TextLabel \- Текстовая метка  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <text\&.hpp>\fP
.PP
Базовые классы:\fBKolibriLib::UI::UIElement\fP и \fBKolibriLib::UI::text::Text\fP\&.
.PP
Производные классы:\fBKolibriLib::UI::buttons::Button\fP\&.
.SS "Открытые члены"

.in +1c
.ti -1c
.RI "\fBTextLabel\fP (const \fBCoord\fP &coord={0, 0}, const \fBSize\fP &size={16, 16}, const std::string &text='TextLabel', const unsigned &FontSize=9, bool TextScale=true, const \fBColors::Color\fP &TextColor=\fBOS::GetSystemColors\fP()\&.work_text, const unsigned &Margin=0)"
.br
.RI "Конструктор "
.ti -1c
.RI "\fBTextLabel\fP (const \fBCoord\fP &coord={0, 0}, const \fBSize\fP &size={16, 16}, const std::string &text='TextLabel', const \fBFonts::Font\fP &Font=\fBFonts::DefaultFont\fP, const \fBColors::Color\fP &TextColor=\fBOS::GetSystemColors\fP()\&.work_text, const \fBColors::Color\fP &BackgroundColor=\fBOS::GetSystemColors\fP()\&.frame_area, bool TextScale=true, const unsigned &Margin=0)"
.br
.ti -1c
.RI "virtual void \fBRender\fP () const"
.br
.RI "Отрисовать текстовую метку "
.ti -1c
.RI "void \fBSetScale\fP (bool scale)"
.br
.RI "Изменить значение переменной \fB_TextScale\&.\fP"
.ti -1c
.RI "bool \fBGetScale\fP () const"
.br
.RI "Получить состояние переменной \fB@ return значение переменной  _TextScale\&. \fP"
.ti -1c
.RI "\fBTextLabel\fP & \fBoperator=\fP (const \fBTextLabel\fP &a)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBTextLabel\fP &a) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBTextLabel\fP &a) const"
.br
.in -1c

Открытые члены унаследованные от \fBKolibriLib::UI::UIElement\fP
.in +1c
.ti -1c
.RI "\fBUIElement\fP (const \fBCoord\fP &coord=\fBCoord\fP(0, 0), const \fBSize\fP &size=\fBSize\fP(32, 32), const \fBColors::Color\fP &MainColor=\fBOS::GetSystemColors\fP()\&.work_graph, const unsigned &Margin=DefaultMargin, bool relative=false)"
.br
.RI "Конструктор "
.ti -1c
.RI "const \fBSize\fP & \fBGetSize\fP () const"
.br
.RI "Получить размер элемента "
.ti -1c
.RI "void \fBSetSize\fP (const \fBSize\fP &NewSize)"
.br
.RI "Изменить размер элемента "
.ti -1c
.RI "unsigned \fBGetMargin\fP () const"
.br
.RI "Получить отступы "
.ti -1c
.RI "const \fBColors::Color\fP & \fBGetColor\fP () const"
.br
.RI "Получить осносной цвет элемента "
.ti -1c
.RI "void \fBSetColor\fP (const \fBColors::Color\fP &NewColor)"
.br
.RI "Изменить цвет "
.ti -1c
.RI "void \fBSetCoord\fP (const \fBCoord\fP &NewCoord)"
.br
.RI "изменить координаты "
.ti -1c
.RI "const \fBCoord\fP & \fBGetCoord\fP () const"
.br
.RI "Получить координаты элемента "
.ti -1c
.RI "void \fBRotate\fP (unsigned NewAngle)"
.br
.RI "Повернуть элемент "
.ti -1c
.RI "unsigned \fBGetRotate\fP () const"
.br
.RI "Получить угол наклона элемента "
.ti -1c
.RI "bool \fBHover\fP () const"
.br
.RI "Проверить лежит ли курсор мыши над элементом "
.ti -1c
.RI "virtual void \fBRender\fP ()"
.br
.RI "отрисовать элемент "
.ti -1c
.RI "\fBUIElement\fP & \fBoperator=\fP (const \fBUIElement\fP &Element)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBUIElement\fP &Element) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBUIElement\fP &Element) const"
.br
.in -1c

Открытые члены унаследованные от \fBKolibriLib::UI::text::Text\fP
.in +1c
.ti -1c
.RI "\fBText\fP ()"
.br
.RI "Конструктор "
.ti -1c
.RI "\fBText\fP (const std::string &text)"
.br
.RI "Конструктор "
.ti -1c
.RI "void \fBAdd\fP (const \fBChar\fP &c)"
.br
.RI "Добавить символ в конец "
.ti -1c
.RI "void \fBAdd\fP (const std::string &txt)"
.br
.RI "Добавить строку в конец "
.ti -1c
.RI "void \fBAdd\fP (const \fBImages::img\fP &img)"
.br
.RI "долбавить изображение в конец "
.ti -1c
.RI "void \fBinsert\fP (const \fBChar\fP &c, int i)"
.br
.RI "Вставить элемент "
.ti -1c
.RI "void \fBinsert\fP (const std::string &txt, int i)"
.br
.RI "Вставить строку "
.ti -1c
.RI "void \fBinsert\fP (const \fBImages::img\fP &img, int i)"
.br
.RI "Вставить изображение "
.ti -1c
.RI "void \fBDelete\fP (int i)"
.br
.RI "Удалить \fBChar\fP из текста "
.ti -1c
.RI "void \fBPrint\fP (const \fBCoord\fP &coord) const"
.br
.RI "Вывести текст "
.ti -1c
.RI "void \fBSetFont\fP (const \fBFonts::Font\fP &Font)"
.br
.RI "Изменить шрифт символов "
.ti -1c
.RI "void \fBSetTextColor\fP (const \fBColors::Color\fP &Color)"
.br
.RI "Изменить цвет текста для всех символов "
.ti -1c
.RI "void \fBSetBackgroundColor\fP (const \fBColors::Color\fP &Color)"
.br
.RI "Изменить цвет фона для всех символов "
.ti -1c
.RI "std::string & \fBGetText\fP () const"
.br
.RI "Получить текст "
.ti -1c
.RI "const \fBChar\fP & \fBGetChar\fP (int i) const"
.br
.RI "Получить символ под номером i\&. "
.ti -1c
.RI "std::size_t \fBlength\fP () const"
.br
.RI "Получить длину текста "
.ti -1c
.RI "unsigned \fBlenghtPX\fP () const"
.br
.RI "Получить длинну текста в пикселях "
.ti -1c
.RI "void \fBSetText\fP (std::string text)"
.br
.ti -1c
.RI "\fBText\fP & \fBoperator=\fP (const \fBText\fP &txt)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBText\fP &txt) const"
.br
.in -1c
.SS "Дополнительные унаследованные члены"


Защищенные данные унаследованные от \fBKolibriLib::UI::UIElement\fP
.in +1c
.ti -1c
.RI "\fBCoord\fP \fB_coord\fP"
.br
.RI "Координаты "
.ti -1c
.RI "\fBSize\fP \fB_size\fP"
.br
.RI "Размер "
.ti -1c
.RI "\fBColors::Color\fP \fB_MainColor\fP"
.br
.ti -1c
.RI "unsigned \fB_Margin\fP"
.br
.RI "Отступы "
.ti -1c
.RI "unsigned \fB_angle\fP"
.br
.RI "Угол наклона "
.ti -1c
.RI "bool \fB_relative\fP"
.br
.RI "Оносительны ли координаты "
.in -1c

Защищенные данные унаследованные от \fBKolibriLib::UI::text::Text\fP
.in +1c
.ti -1c
.RI "std::vector< \fBChar\fP > \fB_data\fP"
.br
.in -1c
.SH "Подробное описание"
.PP 
Текстовая метка 


.PP
\fBЗаметки\fP
.RS 4
Простая текстовая метка, ничего особенного\&. 
.PP
Возможно важные сведения: текст всегда отрисовывается в середине 
.br
 
.RE
.PP

.SH "Конструктор(ы)"
.PP 
.SS "KolibriLib::UI::text::TextLabel::TextLabel (const \fBCoord\fP & coord = \fR{0, 0}\fP, const \fBSize\fP & size = \fR{16, 16}\fP, const std::string & text = \fR'TextLabel'\fP, const unsigned & FontSize = \fR9\fP, bool TextScale = \fRtrue\fP, const \fBColors::Color\fP & TextColor = \fR\fBOS::GetSystemColors\fP()\&.work_text\fP, const unsigned & Margin = \fR0\fP)"

.PP
Конструктор 
.PP
\fBАргументы\fP
.RS 4
\fIcoord\fP координата 
.br
\fIsize\fP Рамер элемента, игнорируется если TextScale = false 
.br
\fItext\fP Текст текста 
.br
\fIFontSize\fP Размер текста 
.br
\fITextScale\fP Маштабировать текст, чтобы он не выходил за границы элемента 
.br
\fIMargin\fP Отступы от границ 
.RE
.PP

.SH "Методы"
.PP 
.SS "\fBtext::TextLabel\fP & KolibriLib::UI::text::TextLabel::operator= (const \fBTextLabel\fP & a)"

.PP
\fBАргументы\fP
.RS 4
\fIa\fP 
.RE
.PP
\fBВозвращает\fP
.RS 4

.br
 
.RE
.PP

.SS "bool KolibriLib::UI::text::TextLabel::operator== (const \fBTextLabel\fP & a) const"

.PP
\fBАргументы\fP
.RS 4
\fIa\fP 
.RE
.PP
\fBВозвращает\fP
.RS 4

.br
 
.RE
.PP

.SS "void KolibriLib::UI::text::TextLabel::Render () const\fR [virtual]\fP"

.PP
Отрисовать текстовую метку 
.PP
Переопределяется в \fBKolibriLib::UI::buttons::Button\fP\&.
.SS "void KolibriLib::UI::text::TextLabel::SetScale (bool scale)"

.PP
Изменить значение переменной \fB_TextScale\&.\fP
.PP
\fBАргументы\fP
.RS 4
\fIscale\fP Новое значение 
.RE
.PP


.SH "Автор"
.PP 
Автоматически создано Doxygen для KolibriLib из исходного текста\&.
