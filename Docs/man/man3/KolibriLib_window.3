.TH "KolibriLib::window" 3 "KolibriLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KolibriLib::window \- Работа с окном  

.SH SYNOPSIS
.br
.PP
.SS "Классы"

.in +1c
.ti -1c
.RI "class \fBWindow\fP"
.br
.RI "Класс для работы с окном "
.in -1c
.SS "Перечисления"

.in +1c
.ti -1c
.RI "enum \fBWindowStyle\fP { \fBFixSize\fP = 0, \fBNoDraw\fP = 1, \fBCanResize\fP = 2, \fBwithSkin\fP = 3, \fBFixSizewithSkin\fP = 4, \fBWindowHaveTitle\fP = 0b00010000, \fBNoDrawWorkspace\fP = 0b01000000, \fBGradientDraw\fP = 0b10000000 }"
.br
.ti -1c
.RI "enum \fBPos\fP { \fBBackGround\fP = -2, \fBAlwaysBack\fP = -1, \fBNormal\fP = 0, \fBAlwaysTop\fP = 1 }"
.br
.RI "Список констант положения окна относительно других окон: "
.in -1c
.SS "Функции"

.in +1c
.ti -1c
.RI "template<> void \fBKolibriLib::window::Window::Element::SetElement< KolibriLib::UI::buttons::Button >\fP (const \fBKolibriLib::UI::buttons::Button\fP &elem)"
.br
.ti -1c
.RI "template<> void \fBKolibriLib::window::Window::Element::SetElement< KolibriLib::UI::Images::Image >\fP (const \fBKolibriLib::UI::Images::Image\fP &elem)"
.br
.ti -1c
.RI "template<> void \fBKolibriLib::window::Window::Element::SetElement< KolibriLib::UI::CheckBox >\fP (const \fBKolibriLib::UI::CheckBox\fP &elem)"
.br
.ti -1c
.RI "template<> void \fBKolibriLib::window::Window::Element::SetElement< KolibriLib::UI::Form >\fP (const \fBKolibriLib::UI::Form\fP &elem)"
.br
.ti -1c
.RI "template<> void \fBKolibriLib::window::Window::Element::SetElement< KolibriLib::UI::text::TextLabel >\fP (const \fBKolibriLib::UI::text::TextLabel\fP &elem)"
.br
.ti -1c
.RI "template<> void \fBKolibriLib::window::Window::Element::SetElement< KolibriLib::UI::Menu >\fP (const \fBKolibriLib::UI::Menu\fP &elem)"
.br
.ti -1c
.RI "template<> void \fBKolibriLib::window::Window::Element::SetElement< KolibriLib::UI::Frame >\fP (const \fBKolibriLib::UI::Frame\fP &elem)"
.br
.ti -1c
.RI "void \fBCreateWindow\fP (const \fBCoord\fP &coord, const \fBSize\fP &size, const std::string &title, const \fBColors::Color\fP &WorkColor=\fBOS::GetSystemColors\fP()\&.work_area, \fBColors::Color\fP TitleColor=\fBOS::GetSystemColors\fP()\&.work_text, uint32_t style=\fBWindowStyle::CanResize\fP)"
.br
.ti -1c
.RI "void \fBUnfocusWindow\fP (\fBThread::Slot\fP slot)"
.br
.RI "Снять фокус с окна "
.ti -1c
.RI "void \fBFocusWindow\fP (\fBThread::Slot\fP slot)"
.br
.RI "Поставить фокус на окно "
.ti -1c
.RI "\fBThread::Slot\fP \fBGetActiveWindow\fP ()"
.br
.RI "Получить слот активного окна "
.ti -1c
.RI "void \fBMinimizeWindow\fP ()"
.br
.RI "Свернуть окно "
.ti -1c
.RI "void \fBMinimizeAllWindows\fP ()"
.br
.RI "Свернуть все окна "
.ti -1c
.RI "\fBCoord\fP \fBGetWindowCoord\fP ()"
.br
.ti -1c
.RI "int \fBGetWindowPos\fP ()"
.br
.RI "Получить положение окна относительно других окон "
.ti -1c
.RI "bool \fBSetWindowPos\fP (int pos, \fBThread::PID\fP pid=\-1)"
.br
.RI "Изменить положение окна относительно дроугих окон "
.ti -1c
.RI "unsigned \fBGetSkinHeight\fP ()"
.br
.RI "Получить высоту скина(заголовка окна) "
.in -1c
.SS "Переменные"

.in +1c
.ti -1c
.RI "const \fBSize\fP \fBDefaultWindowSize\fP = {600, 400}"
.br
.RI "Размер окна поумолчанию "
.ti -1c
.RI "const \fBCoord\fP \fBDefaultWindowCoord\fP = {100, 100}"
.br
.RI "Соординаты окна по умолчанию "
.in -1c
.SH "Подробное описание"
.PP 
Работа с окном 
.SH "Перечисления"
.PP 
.SS "enum \fBKolibriLib::window::WindowStyle\fP"

.PP
\fBЭлементы перечислений\fP
.in +1c
.TP
\fB\fIFixSize \fP\fP
окно фиксированных размеров 
.TP
\fB\fINoDraw \fP\fP
только определить область окна, ничего не рисовать 
.TP
\fB\fICanResize \fP\fP
окно изменяемых размеров 
.TP
\fB\fIwithSkin \fP\fP
окно со скином 
.TP
\fB\fIFixSizewithSkin \fP\fP
окно со скином фиксированных размеров 
.TP
\fB\fIWindowHaveTitle \fP\fP
у окна есть заголовок 
.TP
\fB\fINoDrawWorkspace \fP\fP
не закрашивать рабочую область при отрисовке окна 
.TP
\fB\fIGradientDraw \fP\fP
градиентная заливка рабочей области 
.SH "Функции"
.PP 
.SS "void KolibriLib::window::CreateWindow (const \fBCoord\fP & coord, const \fBSize\fP & size, const std::string & title, const \fBColors::Color\fP & WorkColor = \fR\fBOS::GetSystemColors\fP()\&.work_area\fP, \fBColors::Color\fP TitleColor = \fR\fBOS::GetSystemColors\fP()\&.work_text\fP, uint32_t style = \fR\fBWindowStyle::CanResize\fP\fP)\fR [inline]\fP"

.PP
\fBАргументы\fP
.RS 4
\fIcoord\fP Координаты окна(его левого верхнего угола) на экране 
.br
\fIsize\fP Размеры окна 
.br
\fItitle\fP Заголовок окна 
.br
\fIWorkColor\fP цвет рабочей области окна 
.br
\fITitleColor\fP Цвет текста заголовка 
.br
\fIstyle\fP Стиль 
.RE
.PP

.SS "void KolibriLib::window::FocusWindow (\fBThread::Slot\fP slot)\fR [inline]\fP"

.PP
Поставить фокус на окно 
.PP
\fBАргументы\fP
.RS 4
\fIslot\fP слот окна 
.RE
.PP

.SS "\fBThread::Slot\fP KolibriLib::window::GetActiveWindow ()\fR [inline]\fP"

.PP
Получить слот активного окна 
.PP
\fBВозвращает\fP
.RS 4
Слот активного в данный момент окна 
.RE
.PP

.SS "unsigned KolibriLib::window::GetSkinHeight (void)\fR [inline]\fP"

.PP
Получить высоту скина(заголовка окна) 
.PP
\fBВозвращает\fP
.RS 4
высота скина 
.RE
.PP

.SS "int KolibriLib::window::GetWindowPos ()\fR [inline]\fP"

.PP
Получить положение окна относительно других окон 
.PP
\fBВозвращает\fP
.RS 4
одна из констант из списка \fBPos\fP
.RE
.PP

.SS "bool KolibriLib::window::SetWindowPos (int pos, \fBThread::PID\fP pid = \fR\-1\fP)\fR [inline]\fP"

.PP
Изменить положение окна относительно дроугих окон 
.PP
\fBАргументы\fP
.RS 4
\fIpos\fP значение из списка \fBpid процесс окна, по умолчанию текущий  false если ошибка, \fP
.RE
.PP

.SS "void KolibriLib::window::UnfocusWindow (\fBThread::Slot\fP slot)\fR [inline]\fP"

.PP
Снять фокус с окна 
.PP
\fBАргументы\fP
.RS 4
\fIslot\fP слот окна 
.RE
.PP

.SH "Автор"
.PP 
Автоматически создано Doxygen для KolibriLib из исходного текста\&.
