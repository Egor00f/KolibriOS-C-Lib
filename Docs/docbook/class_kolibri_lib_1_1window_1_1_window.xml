<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_kolibri_lib_1_1window_1_1_window" xml:lang="ru">
<title>Класс KolibriLib::window::Window</title>
<indexterm><primary>KolibriLib::window::Window</primary></indexterm>
<para>

<para>Класс для работы с окном </para>
 
</para>
<para>
<computeroutput>#include &lt;window.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Открытые члены    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_kolibri_lib_1_1window_1_1_window_1ab379a62fdd71ba128d3c06f81bfa5b91">Window</link> (const std::string &amp;Title=&quot;Window&quot;, const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp;size=<link linkend="_namespace_kolibri_lib_1_1window_1a1f1ae2f8103c37a9b5a88cce14f75f9d">DefaultWindowSize</link>, const <link linkend="_struct_kolibri_lib_1_1_colors_1_1_colors_table">Colors::ColorsTable</link> &amp;colors=<link linkend="_namespace_kolibri_lib_1_1_colors_1ad6deb13041b3eac69cf1eeaab2b814a8">Colors::DefaultColorTable</link>, const <link linkend="_union_kolibri_lib_1_1_colors_1_1_color">Colors::Color</link> &amp;TitleColor=OS::sys_color_table.work_text, bool Resize=false, bool RealtimeReadraw=false, bool Gradient=false, unsigned Transparency=0, const unsigned &amp;Margin=0)</para>

<para>Конструктор </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a85dc195e5b5c35e8d8b61f5893438c1a"/>void <emphasis role="strong">Redraw</emphasis> ()</para>

<para>Полная перересовка окна </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a4e553d653ac35276f7f334fce3d0cddb"/>void <emphasis role="strong">Render</emphasis> (const <link linkend="_struct_kolibri_lib_1_1point">UI::Coord</link> &amp;coord=<link linkend="_namespace_kolibri_lib_1_1window_1a0b2c16c6f0b120a6ef83b2366006c6a6">DefaultWindowCoord</link>)</para>

<para>Отрисовать окно </para>
</listitem>
            <listitem><para>unsigned <link linkend="_class_kolibri_lib_1_1window_1_1_window_1aeee663e7541c18cd2c703b9b88c281f6">GetMargin</link> () const</para>

<para>Получить рамер отступов в этом окне </para>
</listitem>
            <listitem><para>const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp; <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a021f39165e33339ac70044d8b9b99560">GetSize</link> () const</para>

<para>Получить размер окна </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1window_1_1_window_1afdfac77ae4d36dc21c7e6a56b6f106ab">SetWindowColors</link> (const <link linkend="_struct_kolibri_lib_1_1_colors_1_1_colors_table">Colors::ColorsTable</link> &amp;colorTable)</para>

<para>Задать стандартные цвета окна </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a603092d7729140f846c3b23f53885b05">StartRedraw</link> () const</para>

<para>Начать перересовку окна </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a2fbcdad4e5e0c3942a479113d2deffb1">EndRedraw</link> () const</para>

<para>Закончить перересовку окна </para>
</listitem>
            <listitem><para>const <link linkend="_struct_kolibri_lib_1_1point">UI::Coord</link> &amp; <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a5d50b995c57de979294bf615e4e5a1c8">GetCoord</link> () const</para>

<para>Получить координаты окна </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1window_1_1_window_1ad8cabebed871cdeb4ae11890188c57be">ChangeWindow</link> (const <link linkend="_struct_kolibri_lib_1_1point">UI::Coord</link> &amp;coord, const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp;size)</para>

<para>Изменить окно </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a7d76ecef25088a0fd9578fd4b498770c">ChangeTilte</link> (const std::string &amp;newTitle)</para>

<para>Изменить заголовок окна </para>
</listitem>
            <listitem><para>const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp; <link linkend="_class_kolibri_lib_1_1window_1_1_window_1acc42b4a4739a4cc94e5a5de993e00e87">GetWindowSize</link> () const</para>

<para>Получить размер окна </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a1ddd735a9156802de746e389a9d2e9c3">DeleteElement</link> (int id)</para>

<para>Удалить элемент </para>
</listitem>
            <listitem><para><link linkend="_namespace_kolibri_lib_1_1_o_s_1abe4a29759805b4449591c8efb1d10d34">OS::Event</link> <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a33a17f79c99855fb543cc060b197ce99">Handler</link> ()</para>

<para>Обработчик окна </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1ae3132dabb8fc92444c3fa31cb35c2495"/><link linkend="_namespace_kolibri_lib_1_1_u_i_1_1buttons_1a5bc139230a84a2c4049ba6677932e35b">UI::buttons::ButtonID</link> <emphasis role="strong">GetPressedButton</emphasis> ()</para>

<para>Проверить какая нажата </para>
</listitem>
            <listitem><para>const std::string &amp; <link linkend="_class_kolibri_lib_1_1window_1_1_window_1aba4c487170073562f7471e41164c6392">GetInputFromFrom</link> (int form) const</para>

<para>Получить текст введённый в форму </para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>int <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a3d155b43e5beb5467b1db4bdae7bc172">AddElement</link> (const T &amp;element)</para>

<para>Добавить UI элемент </para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>void <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a7f9c6a4fc6b2e620ab29acd339955a4b">SetElement</link> (int i, const T &amp;element)</para>

<para>Изменить элемент tparam T. </para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>const T &amp; <link linkend="_class_kolibri_lib_1_1window_1_1_window_1a802663a211e98099e9fc9ad4dad6994f">GetElement</link> (int i) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1ae074267ec49af5a67e268aebd1d3aae6"/>void <emphasis role="strong">Unfocus</emphasis> () const</para>

<para>Снять фокус с этого окна </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1af24f1580a621e0f7047fc3bbb5138d16"/>void <emphasis role="strong">Focus</emphasis> () const</para>

<para>Поставить фокус на это окно </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Подробное описание</title>

<para>Класс для работы с окном </para>


<section xml:id="_class_kolibri_lib_1_1window_1_1_window_1По">
<title><title>простому: Окно остаётся привязаным к потоку, в которм бы вызван конструктор</title></title>
</section>
<section xml:id="_namespace_kolibri_lib_1_1_u_i_1_1text_1Для">
<title><title>изменения высоты шрифта используйте <link linkend="_">SetTextSize(unsigned)</link></title></title>
</section>
</section>
<section>
<title>Конструктор(ы)</title>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1ab379a62fdd71ba128d3c06f81bfa5b91"/><section>
    <title>Window()</title>
<indexterm><primary>Window</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>Window</secondary></indexterm>
<para><computeroutput>KolibriLib::window::Window::Window (const std::string &amp; Title = <computeroutput>&quot;Window&quot;</computeroutput>
, const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp; size = <computeroutput><link linkend="_namespace_kolibri_lib_1_1window_1a1f1ae2f8103c37a9b5a88cce14f75f9d">DefaultWindowSize</link></computeroutput>
, const <link linkend="_struct_kolibri_lib_1_1_colors_1_1_colors_table">Colors::ColorsTable</link> &amp; colors = <computeroutput><link linkend="_namespace_kolibri_lib_1_1_colors_1ad6deb13041b3eac69cf1eeaab2b814a8">Colors::DefaultColorTable</link></computeroutput>
, const <link linkend="_union_kolibri_lib_1_1_colors_1_1_color">Colors::Color</link> &amp; TitleColor = <computeroutput>OS::sys_color_table.work_text</computeroutput>
, bool Resize = <computeroutput>false</computeroutput>
, bool RealtimeReadraw = <computeroutput>false</computeroutput>
, bool Gradient = <computeroutput>false</computeroutput>
, unsigned Transparency = <computeroutput>0</computeroutput>
, const unsigned &amp; Margin = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>Конструктор </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Title</entry><entry>
<para>Заголовок окна </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>Размер окна </para>
</entry>
                            </row>
                            <row>
<entry>style</entry><entry>
<para>стиль окна </para>
</entry>
                            </row>
                            <row>
<entry>colors</entry><entry>
<para>Цвет окна </para>
</entry>
                            </row>
                            <row>
<entry>Margin</entry><entry>
<para>Отступы </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Методы</title>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a3d155b43e5beb5467b1db4bdae7bc172"/><section>
    <title>AddElement()</title>
<indexterm><primary>AddElement</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>AddElement</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>int KolibriLib::window::Window::AddElement (const T &amp; element)</computeroutput></para><para>

<para>Добавить UI элемент </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>element</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a7d76ecef25088a0fd9578fd4b498770c"/><section>
    <title>ChangeTilte()</title>
<indexterm><primary>ChangeTilte</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>ChangeTilte</secondary></indexterm>
<para><computeroutput>void KolibriLib::window::Window::ChangeTilte (const std::string &amp; newTitle)</computeroutput></para><para>

<para>Изменить заголовок окна </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>newTitle</entry><entry>
<para>новый заголовок </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1ad8cabebed871cdeb4ae11890188c57be"/><section>
    <title>ChangeWindow()</title>
<indexterm><primary>ChangeWindow</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>ChangeWindow</secondary></indexterm>
<para><computeroutput>void KolibriLib::window::Window::ChangeWindow (const <link linkend="_struct_kolibri_lib_1_1point">UI::Coord</link> &amp; coord, const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp; size)</computeroutput></para><para>

<para>Изменить окно </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>coord</entry><entry>
<para>позиция </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>размер </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a1ddd735a9156802de746e389a9d2e9c3"/><section>
    <title>DeleteElement()</title>
<indexterm><primary>DeleteElement</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>DeleteElement</secondary></indexterm>
<para><computeroutput>void KolibriLib::window::Window::DeleteElement (int id)</computeroutput></para><para>

<para>Удалить элемент </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>idшник того элемента, которой нужно удалить </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a2fbcdad4e5e0c3942a479113d2deffb1"/><section>
    <title>EndRedraw()</title>
<indexterm><primary>EndRedraw</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>EndRedraw</secondary></indexterm>
<para><computeroutput>void KolibriLib::window::Window::EndRedraw ( ) const</computeroutput></para><para>

<para>Закончить перересовку окна </para>
</para>
<section xml:id="_class_kolibri_lib_1_1window_1_1_window_1Обязательно">
<title><title>после должна быть вызвана функция #EndRedraw()</title></title>
</section>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a5d50b995c57de979294bf615e4e5a1c8"/><section>
    <title>GetCoord()</title>
<indexterm><primary>GetCoord</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>GetCoord</secondary></indexterm>
<para><computeroutput>const <link linkend="_struct_kolibri_lib_1_1point">UI::Coord</link> &amp; KolibriLib::window::Window::GetCoord ( ) const</computeroutput></para><para>

<para>Получить координаты окна </para>
</para>

<para><formalpara><title>Возвращает</title>

<para><?linebreak?> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a802663a211e98099e9fc9ad4dad6994f"/><section>
    <title>GetElement()</title>
<indexterm><primary>GetElement</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>GetElement</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>const T &amp; KolibriLib::window::Window::GetElement (int i) const</computeroutput></para>
<para>
                <formalpara>
                    <title>
Параметры шаблона</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>i</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Возвращает</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1aba4c487170073562f7471e41164c6392"/><section>
    <title>GetInputFromFrom()</title>
<indexterm><primary>GetInputFromFrom</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>GetInputFromFrom</secondary></indexterm>
<para><computeroutput>const std::string &amp; KolibriLib::window::Window::GetInputFromFrom (int form) const</computeroutput></para><para>

<para>Получить текст введённый в форму </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>form</entry><entry>
<para>номер формы в списке </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Возвращает</title>

<para>Функция возвращает текст введённый в формы </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1aeee663e7541c18cd2c703b9b88c281f6"/><section>
    <title>GetMargin()</title>
<indexterm><primary>GetMargin</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>GetMargin</secondary></indexterm>
<para><computeroutput>unsigned KolibriLib::window::Window::GetMargin ( ) const</computeroutput></para><para>

<para>Получить рамер отступов в этом окне </para>
</para>

<para><formalpara><title>Возвращает</title>

<para><link linkend="_acd07e272bc0305c47a75a2b61fa7b870">_MARGIN</link></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a021f39165e33339ac70044d8b9b99560"/><section>
    <title>GetSize()</title>
<indexterm><primary>GetSize</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>GetSize</secondary></indexterm>
<para><computeroutput>const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp; KolibriLib::window::Window::GetSize ( ) const</computeroutput></para><para>

<para>Получить размер окна </para>
</para>

<para><formalpara><title>Возвращает</title>

<para><link linkend="_ab4f87a42bcc641f12ee2c88cb32bdc7c">_size</link></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1acc42b4a4739a4cc94e5a5de993e00e87"/><section>
    <title>GetWindowSize()</title>
<indexterm><primary>GetWindowSize</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>GetWindowSize</secondary></indexterm>
<para><computeroutput>const <link linkend="_struct_kolibri_lib_1_1point">UI::Size</link> &amp; KolibriLib::window::Window::GetWindowSize ( ) const</computeroutput></para><para>

<para>Получить размер окна </para>
</para>

<para><formalpara><title>Возвращает</title>

<para><link linkend="_struct_kolibri_lib_1_1point_1add46882563c402c224b23c85049f7f34">point.x</link> - ширина окна, </para>

<para><link linkend="_struct_kolibri_lib_1_1point_1a2552f28a0a4bd6d41b0b75c7e3dec4e0">point.y</link> - высота окна </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a33a17f79c99855fb543cc060b197ce99"/><section>
    <title>Handler()</title>
<indexterm><primary>Handler</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>Handler</secondary></indexterm>
<para><computeroutput><link linkend="_namespace_kolibri_lib_1_1_o_s_1abe4a29759805b4449591c8efb1d10d34">OS::Event</link> KolibriLib::window::Window::Handler ( )</computeroutput></para><para>

<para>Обработчик окна </para>
</para>

<para><formalpara><title>Возвращает</title>

<para>Ивент </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a7f9c6a4fc6b2e620ab29acd339955a4b"/><section>
    <title>SetElement()</title>
<indexterm><primary>SetElement</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>SetElement</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void KolibriLib::window::Window::SetElement (int i, const T &amp; element)</computeroutput></para><para>

<para>Изменить элемент tparam T. </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>i</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>element</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1afdfac77ae4d36dc21c7e6a56b6f106ab"/><section>
    <title>SetWindowColors()</title>
<indexterm><primary>SetWindowColors</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>SetWindowColors</secondary></indexterm>
<para><computeroutput>void KolibriLib::window::Window::SetWindowColors (const <link linkend="_struct_kolibri_lib_1_1_colors_1_1_colors_table">Colors::ColorsTable</link> &amp; colorTable)</computeroutput></para><para>

<para>Задать стандартные цвета окна </para>
</para>

<para>
                <formalpara>
                    <title>
Аргументы</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>colorTable</entry><entry>
<para>таблица цветов </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1window_1_1_window_1a603092d7729140f846c3b23f53885b05"/><section>
    <title>StartRedraw()</title>
<indexterm><primary>StartRedraw</primary><secondary>KolibriLib::window::Window</secondary></indexterm>
<indexterm><primary>KolibriLib::window::Window</primary><secondary>StartRedraw</secondary></indexterm>
<para><computeroutput>void KolibriLib::window::Window::StartRedraw ( ) const</computeroutput></para><para>

<para>Начать перересовку окна </para>
</para>
<section xml:id="_class_kolibri_lib_1_1window_1_1_window_1Стирает">
<title><title>всё что было нарисованно в окне</title></title>
</section>
<section xml:id="_class_kolibri_lib_1_1window_1_1_window_1Обязательно">
<title><title>после должна быть вызвана функция #EndRedraw()</title></title>
</section>
</section>
<para>
Объявления и описания членов класса находятся в файле:</para>
F:/KolibriOs/KolibriOS-Cpp-Lib/include/kolibriLib/window/window.hpp</section>
</section>
