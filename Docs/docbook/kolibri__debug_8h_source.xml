<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_kolibri__debug_8h_source" xml:lang="ru">
<title>kolibri_debug.h</title>
<indexterm><primary>C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_debug.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;KOLIBRI_DEBUG_H</emphasis>
2 <emphasis role="preprocessor">#define&#32;KOLIBRI_DEBUG_H</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&lt;_ansi.h&gt;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;reent.h&gt;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
8 
9 <emphasis role="comment">/*&#32;Write&#32;a&#32;printf()&#32;like&#32;function&#32;(variable&#32;argument&#32;list)&#32;for</emphasis>
10 <emphasis role="comment">&#32;&#32;&#32;writing&#32;to&#32;debug&#32;board&#32;*/</emphasis>
11 
12 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_board_write_byte(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ch){
13 &#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
14 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
15 &#32;&#32;&#32;&#32;:
16 &#32;&#32;&#32;&#32;:<emphasis role="stringliteral">&quot;a&quot;</emphasis>(63),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(ch));
17 }
18 
19 <emphasis role="comment">//added&#32;noninline&#32;because&#32;incofortabre&#32;stepping&#32;in&#32;in&#32;debugger</emphasis>
20 <emphasis role="keywordtype">void</emphasis>&#32;__attribute__&#32;((noinline))&#32;debug_board_write_str(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str){
21 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(*str)
22 &#32;&#32;&#32;&#32;debug_board_write_byte(*str++);
23 }
24 
25 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_board_printf(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*format,...)
26 {
27 &#32;&#32;&#32;&#32;va_list&#32;ap;
28 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;log_board[300];
29 
30 &#32;&#32;&#32;&#32;va_start&#32;(ap,&#32;format);
31 &#32;&#32;&#32;&#32;vsprintf(log_board,&#32;format,&#32;ap);
32 &#32;&#32;&#32;&#32;va_end(ap);
33 &#32;&#32;&#32;&#32;debug_board_write_str(log_board);
34 }
35 
36 __attribute__&#32;((noinline))&#32;<emphasis role="keywordtype">void</emphasis>&#32;trap(<emphasis role="keywordtype">int</emphasis>&#32;n)
37 {
38 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nothing&#32;todo,&#32;just&#32;see&#32;n&#32;in&#32;debugger.&#32;use&#32;&quot;bp&#32;trap&quot;&#32;command</emphasis>
39 &#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
40 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;nop&quot;</emphasis>
41 &#32;&#32;&#32;&#32;:
42 &#32;&#32;&#32;&#32;:<emphasis role="stringliteral">&quot;a&quot;</emphasis>(n));
43 }
44 
45 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;KOLIBRI_DEBUG_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
