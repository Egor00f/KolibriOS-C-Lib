<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_types_8hpp_source" xml:lang="ru">
<title>types.hpp</title>
<indexterm><primary>C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/types.hpp</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">всякие&#32;разные&#32;базовые&#32;типы</emphasis>
3 <emphasis role="comment">*/</emphasis>
4 <emphasis role="preprocessor">#ifndef&#32;__TYPES_H__</emphasis>
5 <emphasis role="preprocessor">#define&#32;__TYPES_H__</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&lt;sys/ksys.h&gt;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&lt;kolibriLib/system/filesystem.hpp&gt;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&lt;kolibriLib/color.hpp&gt;</emphasis>
10 
11 <emphasis role="preprocessor">#define&#32;X_Y(x,&#32;y)(((x)&#32;&lt;&lt;&#32;16)&#32;|&#32;(y))</emphasis>
12 
13 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_kolibri_lib">KolibriLib</link>
14 {
15 &#32;&#32;&#32;&#32;
17 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_kolibri_lib_1_1point">point</link>
18 &#32;&#32;&#32;&#32;{
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point_1aba63dd75453b02a799b9cd6ae5773cfe">x</link>;
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point_1a92d76b1b7cb1eabab7bc3916b6341a24">y</link>;
23 
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point_1a265a991978495b66d5cf24346e975bfc">point</link>(<emphasis role="keywordtype">int</emphasis>&#32;X&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Y&#32;=&#32;0);
28 
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point_1a088398ffb8097c6a7cde98e29ee6b37d">point</link>(<emphasis role="keywordtype">float</emphasis>&#32;f);
32 
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ksys_pos_t&#32;GetKsysPost()&#32;<emphasis role="keyword">const</emphasis>;
34 
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&amp;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;a);
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;operator-(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;a);
37 
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;<link linkend="_struct_kolibri_lib_1_1point_1a8128ee0637bb637b9ebc243ee13fea16">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;p);
42 
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;<link linkend="_struct_kolibri_lib_1_1point_1a3fe3cb1645f178a4274fc8e8048e275a">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;p);
48 
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;operator-=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;p);
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;operator*=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;p);
52 
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;operator/=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;p);
54 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point_1a7407c78217e0395f96a88692e8cf7421">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;a)&#32;<emphasis role="keyword">const</emphasis>;
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
60 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point_1a065d56469c375a2912116f4e7a1c1a2d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;&amp;a)&#32;<emphasis role="keyword">const</emphasis>;
65 &#32;&#32;&#32;&#32;};
66 
67 &#32;&#32;&#32;&#32;
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;<link linkend="_namespace_kolibri_lib_1ab59db84b9e43745d40d7b9ff8f06f2fb">Size</link>;
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct_kolibri_lib_1_1point">point</link>&#32;<link linkend="_namespace_kolibri_lib_1aa4d36453273d28042aad9d1065b058ff">Coord</link>;
73 
74 &#32;&#32;&#32;&#32;<emphasis role="comment">//==================================================================================================</emphasis>
75 
76 &#32;&#32;&#32;&#32;
77 <emphasis role="comment">//==================================================================================================</emphasis>
78 
79 }&#32;<emphasis role="comment">//&#32;namespace&#32;KolibriLib</emphasis>
80 
81 
82 
83 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__TYPES_H__</emphasis>
</programlisting></section>
