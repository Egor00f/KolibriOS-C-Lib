<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_kolibri__msgbox_8h_source" xml:lang="ru">
<title>kolibri_msgbox.h</title>
<indexterm><primary>C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_msgbox.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;KOLIBRI_MSGBOX_H</emphasis>
2 <emphasis role="preprocessor">#define&#32;KOLIBRI_MSGBOX_H</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
5 
6 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>__attribute__&#32;((__packed__))&#32;{
7 &#32;&#32;&#32;&#32;uint8_t&#32;&#32;&#32;&#32;&#32;retval;&#32;&#32;<emphasis role="comment">//&#32;0&#32;-&#32;win&#32;closed,&#32;1&#32;to&#32;n&#32;-&#32;button&#32;num,&#32;also&#32;default&#32;button&#32;on&#32;start</emphasis>
8 &#32;&#32;&#32;&#32;uint8_t&#32;&#32;&#32;&#32;&#32;reserv;
9 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;texts[2048];&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;must&#32;be&#32;enough&#32;;-)</emphasis>
10 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgbox_stack[1024];
11 &#32;&#32;&#32;&#32;uint32_t&#32;&#32;&#32;&#32;top_stack;
12 }&#32;msgbox;
13 
14 
15 <emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*msgbox_callback)(void);
16 
17 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;msgbox_inited;
18 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;kolibri_msgbox_init();
19 <emphasis role="keyword">extern</emphasis>&#32;void&#32;(*msgbox_create)(msgbox&#32;*,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*thread)&#32;__attribute__((__stdcall__));&#32;<emphasis role="comment">//&#32;clears&#32;callbacks,&#32;!&#32;if&#32;fix&#32;lib,&#32;we&#32;can&#32;return&#32;eax&#32;as&#32;of&#32;Fn51</emphasis>
20 <emphasis role="keyword">extern</emphasis>&#32;void&#32;(*msgbox_setfunctions)(msgbox_callback*)&#32;__attribute__((__stdcall__));&#32;<emphasis role="comment">//&#32;must&#32;be&#32;called&#32;immediately&#32;after&#32;create,&#32;zero-ended&#32;array</emphasis>
21 <emphasis role="keyword">extern</emphasis>&#32;void&#32;(*msgbox_reinit)(msgbox&#32;*)&#32;__attribute__((__stdcall__));&#32;&#32;<emphasis role="comment">//&#32;recalc&#32;sizes&#32;when&#32;structure&#32;changes,&#32;called&#32;auto&#32;when&#32;MsgBoxCreate</emphasis>
22 
23 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;msgbox*&#32;kolibri_new_msgbox(<emphasis role="keywordtype">char</emphasis>*&#32;title,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;text,&#32;<emphasis role="keywordtype">int</emphasis>&#32;def_but,&#32;...)
27 {
28 &#32;&#32;&#32;&#32;va_list&#32;vl;
29 &#32;&#32;&#32;&#32;va_start(vl,&#32;def_but);
30 
31 &#32;&#32;&#32;&#32;msgbox*&#32;box&#32;=&#32;calloc(<emphasis role="keyword">sizeof</emphasis>(msgbox),&#32;1);
32 &#32;&#32;&#32;&#32;box-&gt;retval&#32;=&#32;(uint8_t)def_but;
33 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;*pc&#32;=&#32;box-&gt;texts;
34 &#32;&#32;&#32;&#32;strcpy(pc,&#32;title);
35 &#32;&#32;&#32;&#32;pc&#32;+=&#32;strlen(title)&#32;+&#32;1;
36 &#32;&#32;&#32;&#32;strcpy(pc,&#32;text);
37 &#32;&#32;&#32;&#32;pc&#32;+=&#32;strlen(text)&#32;+&#32;1;
38 
39 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;*but_text&#32;=&#32;va_arg(vl,&#32;<emphasis role="keywordtype">char</emphasis>*);
40 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(but_text)
41 &#32;&#32;&#32;&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strcpy(pc,&#32;but_text);
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pc&#32;+=&#32;strlen(but_text)&#32;+&#32;1;
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assert(pc&#32;-&#32;box-&gt;texts&#32;&lt;&#32;sizeof&#32;box-&gt;texts);</emphasis>
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;but_text&#32;=&#32;va_arg(vl,&#32;<emphasis role="keywordtype">char</emphasis>*);
46 &#32;&#32;&#32;&#32;}
47 
48 &#32;&#32;&#32;&#32;va_end(vl);
49 
50 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;box;
51 }
52 
53 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;kolibri_start_msgbox(msgbox*&#32;box,&#32;msgbox_callback&#32;cb[])
54 {
55 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!msgbox_inited)
56 &#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kolibri_msgbox_init();
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgbox_inited++;
59 &#32;&#32;&#32;&#32;}
60 &#32;&#32;&#32;&#32;(*msgbox_create)(box,&#32;&amp;box-&gt;top_stack);
61 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cb)&#32;(*msgbox_setfunctions)(cb);
62 }
63 
64 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
