<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_kos32sys_8h_source" xml:lang="ru">
<title>kos32sys.h</title>
<indexterm><primary>C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kos32sys.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;__KOS_32_SYS_H__</emphasis>
2 <emphasis role="preprocessor">#define&#32;__KOS_32_SYS_H__</emphasis>
3 
4 <emphasis role="comment">//&#32;file&#32;header&#32;taken&#32;from&#32;newlib</emphasis>
5 <emphasis role="comment">//&#32;added&#32;many&#32;sys&#32;functions,&#32;compatible&#32;with&#32;tcc</emphasis>
6 <emphasis role="comment">//&#32;with&#32;gcc&#32;USE&#32;gcc&#32;-mno-ms-bitfields!!!</emphasis>
7 
8 <emphasis role="comment">//&#32;#include&#32;&lt;newlib.h&gt;</emphasis>
9 <emphasis role="comment">//&#32;#include&#32;&lt;stdint.h&gt;</emphasis>
10 <emphasis role="comment">//&#32;#include&#32;&lt;sys/kos_io.h&gt;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&lt;stddef.h&gt;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
16 
17 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;uint32_t;
18 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;int32_t;
19 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;uint8_t;
20 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;uint16_t;
21 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;uint64_t;
22 
23 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
24 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>
25 {
26 <emphasis role="preprocessor">#endif</emphasis>
27 
28 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#ifdef&#32;CONFIG_DEBUF</emphasis>
29 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;#define&#32;DBG(format,...)&#32;printf(format,##__VA_ARGS__)</emphasis>
30 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#else</emphasis>
31 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;#define&#32;DBG(format,...)</emphasis>
32 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#endif</emphasis>
33 
34 <emphasis role="preprocessor">#define&#32;TYPE_3_BORDER_WIDTH&#32;5</emphasis>
35 <emphasis role="preprocessor">#define&#32;WIN_STATE_MINIMIZED&#32;0x02</emphasis>
36 <emphasis role="preprocessor">#define&#32;WIN_STATE_ROLLED&#32;0x04</emphasis>
37 <emphasis role="preprocessor">#define&#32;POS_SCREEN&#32;0</emphasis>
38 <emphasis role="preprocessor">#define&#32;POS_WINDOW&#32;1</emphasis>
39 
40 <emphasis role="preprocessor">#define&#32;IPC_NOBUFFER&#32;1</emphasis>
41 <emphasis role="preprocessor">#define&#32;IPC_LOCKED&#32;2</emphasis>
42 <emphasis role="preprocessor">#define&#32;IPC_OVERFLOW&#32;3</emphasis>
43 <emphasis role="preprocessor">#define&#32;IPC_NOPID&#32;4</emphasis>
44 
45 <emphasis role="preprocessor">#define&#32;SHM_OPEN&#32;0x00</emphasis>
46 <emphasis role="preprocessor">#define&#32;SHM_OPEN_ALWAYS&#32;0x04</emphasis>
47 <emphasis role="preprocessor">#define&#32;SHM_CREATE&#32;0x08</emphasis>
48 <emphasis role="preprocessor">#define&#32;SHM_READ&#32;0x00</emphasis>
49 <emphasis role="preprocessor">#define&#32;SHM_WRITE&#32;0x01</emphasis>
50 
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;color_t;
52 
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">union&#32;</emphasis>__attribute__((packed))&#32;pos_t
54 &#32;&#32;&#32;&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;x;
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;y;
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
61 &#32;&#32;&#32;&#32;}&#32;pos_t;
62 
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">union&#32;</emphasis>__attribute__((packed))&#32;oskey_t
64 &#32;&#32;&#32;&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;state;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;code;
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;ctrl_key;
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
72 &#32;&#32;&#32;&#32;}&#32;oskey_t;
73 
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
75 &#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;handle;
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;io_code;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*input;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;inp_size;
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output;
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_size;
82 &#32;&#32;&#32;&#32;}&#32;<link linkend="_structioctl__t">ioctl_t</link>;
83 
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">union</emphasis>
85 &#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*data;
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size;
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;x;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;raw;
92 &#32;&#32;&#32;&#32;}&#32;<link linkend="_unionufile__t">ufile_t</link>;
93 
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structkolibri__system__colors">kolibri_system_colors</link>
95 &#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;frame_area;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;grab_bar;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;grab_bar_button;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;grab_button_text;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;grab_text;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;work_area;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;work_button;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;work_button_text;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;work_text;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;work_graph;
106 &#32;&#32;&#32;&#32;};
107 
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structblit__call">blit_call</link>
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;dstx;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;dsty;
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;w;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;h;
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;srcx;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;srcy;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;srcw;
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;srch;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*bitmap;
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;stride;
122 &#32;&#32;&#32;&#32;};
123 
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structipc__message">ipc_message</link>
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;pid;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PID&#32;of&#32;sending&#32;thread</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;datalen;&#32;<emphasis role="comment">//&#32;data&#32;bytes</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;data[0];&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;data&#32;begin</emphasis>
129 &#32;&#32;&#32;&#32;};
130 
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structipc__buffer">ipc_buffer</link>
132 &#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;lock;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nonzero&#32;is&#32;locked</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;used;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;used&#32;bytes&#32;in&#32;buffer</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structipc__message">ipc_message</link>&#32;data[0];&#32;<emphasis role="comment">//&#32;data&#32;begin</emphasis>
136 &#32;&#32;&#32;&#32;};
137 
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>__attribute__((packed))&#32;file_op_t
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;fn;
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;flags;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*args;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;res1,&#32;res2;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;zero;
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*app_name
146 <emphasis role="preprocessor">#ifdef&#32;__TINYC__</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((packed))
148 <emphasis role="preprocessor">#endif</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
150 &#32;&#32;&#32;&#32;}&#32;file_op_t;
151 
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;begin_draw(<emphasis role="keywordtype">void</emphasis>)
153 &#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(12),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1));
156 &#32;&#32;&#32;&#32;};
157 
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;end_draw(<emphasis role="keywordtype">void</emphasis>)
159 &#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(12),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(2));
162 &#32;&#32;&#32;&#32;};
163 
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;sys_create_window(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name,
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;workcolor,&#32;uint32_t&#32;style)
166 &#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(0),
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>((x&#32;&lt;&lt;&#32;16)&#32;|&#32;((w&#32;-&#32;1)&#32;&amp;&#32;0xFFFF)),
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>((y&#32;&lt;&lt;&#32;16)&#32;|&#32;((h&#32;-&#32;1)&#32;&amp;&#32;0xFFFF)),
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>((style&#32;&lt;&lt;&#32;24)&#32;|&#32;(workcolor&#32;&amp;&#32;0xFFFFFF)),
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;D&quot;</emphasis>(name),
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;S&quot;</emphasis>(0)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
174 &#32;&#32;&#32;&#32;};
175 
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;define_button(uint32_t&#32;x_w,&#32;uint32_t&#32;y_h,&#32;uint32_t&#32;<emphasis role="keywordtype">id</emphasis>,&#32;uint32_t&#32;color)
177 &#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(8),
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(x_w),
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(y_h),
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(id),
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;S&quot;</emphasis>(color));
184 &#32;&#32;&#32;&#32;};
185 
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;draw_line(<emphasis role="keywordtype">int</emphasis>&#32;xs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ys,&#32;<emphasis role="keywordtype">int</emphasis>&#32;xe,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ye,&#32;color_t&#32;color)
187 &#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(38),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(color),
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>((xs&#32;&lt;&lt;&#32;16)&#32;|&#32;xe),
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>((ys&#32;&lt;&lt;&#32;16)&#32;|&#32;ye));
192 &#32;&#32;&#32;&#32;}
193 
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;draw_bar(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;color_t&#32;color)
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(13),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(color),
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>((x&#32;&lt;&lt;&#32;16)&#32;|&#32;w),
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>((y&#32;&lt;&lt;&#32;16)&#32;|&#32;h));
200 &#32;&#32;&#32;&#32;}
201 
202 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;draw_bitmap(<emphasis role="keywordtype">void</emphasis>&#32;*bitmap,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h)
203 &#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(7),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(bitmap),
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>((w&#32;&lt;&lt;&#32;16)&#32;|&#32;h),
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>((x&#32;&lt;&lt;&#32;16)&#32;|&#32;y));
208 &#32;&#32;&#32;&#32;}
209 
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;draw_text_sys(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*text,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;len,&#32;color_t&#32;color)
211 &#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(4),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(text),
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>((x&#32;&lt;&lt;&#32;16)&#32;|&#32;y),
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;S&quot;</emphasis>(len),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(color)
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
217 &#32;&#32;&#32;&#32;}
218 
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_skin_height(<emphasis role="keywordtype">void</emphasis>)
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;height;
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&#32;\n\t&quot;</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(height)
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(48),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(4));
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;height;
228 &#32;&#32;&#32;&#32;};
229 
230 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;pos_t&#32;get_mouse_pos(<emphasis role="keywordtype">int</emphasis>&#32;origin)
231 &#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_t&#32;val;
233 
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&#32;\n\t&quot;</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;rol&#32;$16,&#32;%%eax&quot;</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(37),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(origin));
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
240 &#32;&#32;&#32;&#32;}
241 
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_mouse_buttons(<emphasis role="keywordtype">void</emphasis>)
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
245 
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(37),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(2));
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
251 &#32;&#32;&#32;&#32;};
252 
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_mouse_wheels(<emphasis role="keywordtype">void</emphasis>)
254 &#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
256 
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&#32;\n\t&quot;</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(37),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(7));
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
262 &#32;&#32;&#32;&#32;};
263 
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;load_cursor(<emphasis role="keywordtype">void</emphasis>&#32;*path,&#32;uint32_t&#32;flags)
265 &#32;&#32;&#32;&#32;{
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(37),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(4),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(path),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(flags));
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
272 &#32;&#32;&#32;&#32;}
273 
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;set_cursor(uint32_t&#32;cursor)
275 &#32;&#32;&#32;&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;old;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(old)
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(37),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(5),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(cursor));
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;old;
282 &#32;&#32;&#32;&#32;};
283 
284 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;destroy_cursor(uint32_t&#32;cursor)
285 &#32;&#32;&#32;&#32;{
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ret;
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(ret)
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(37),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(6),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(cursor)
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
293 &#32;&#32;&#32;&#32;};
294 
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;wait_for_event(uint32_t&#32;time)
296 &#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(23),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(time));
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
303 &#32;&#32;&#32;&#32;};
304 
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;check_os_event()
306 &#32;&#32;&#32;&#32;{
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(11));
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
313 &#32;&#32;&#32;&#32;};
314 
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_os_event()
316 &#32;&#32;&#32;&#32;{
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(10));
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
323 &#32;&#32;&#32;&#32;};
324 
325 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_tick_count(<emphasis role="keywordtype">void</emphasis>)
326 &#32;&#32;&#32;&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(26),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(9));
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
333 &#32;&#32;&#32;&#32;};
334 
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint64_t&#32;get_ns_count(<emphasis role="keywordtype">void</emphasis>)
336 &#32;&#32;&#32;&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;val;
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=A&quot;</emphasis>(val)
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(26),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(10));
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
343 &#32;&#32;&#32;&#32;};
344 
345 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;oskey_t&#32;get_key(<emphasis role="keywordtype">void</emphasis>)
346 &#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oskey_t&#32;val;
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(2));
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
353 &#32;&#32;&#32;&#32;}
354 
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_os_button()
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(17));
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val&#32;&gt;&gt;&#32;8;
363 &#32;&#32;&#32;&#32;};
364 
365 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_service(<emphasis role="keywordtype">char</emphasis>&#32;*name)
366 &#32;&#32;&#32;&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;retval&#32;=&#32;0;
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(retval)
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(16),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(name)
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
373 
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retval;
375 &#32;&#32;&#32;&#32;};
376 
377 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;call_service(<link linkend="_structioctl__t">ioctl_t</link>&#32;*io)
378 &#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;retval;
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(retval)
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(17),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(io)
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cc&quot;</emphasis>);
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retval;
388 &#32;&#32;&#32;&#32;};
389 
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;yield(<emphasis role="keywordtype">void</emphasis>)
391 &#32;&#32;&#32;&#32;{
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1));
394 &#32;&#32;&#32;&#32;};
395 
396 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;delay(uint32_t&#32;time)
397 &#32;&#32;&#32;&#32;{
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(5),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(time)
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
401 &#32;&#32;&#32;&#32;};
402 
403 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*user_alloc(<emphasis role="keywordtype">size_t</emphasis>&#32;size)
404 &#32;&#32;&#32;&#32;{
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*val;
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(12),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(size));
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
411 &#32;&#32;&#32;&#32;}
412 
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;user_free(<emphasis role="keywordtype">void</emphasis>&#32;*mem)
414 &#32;&#32;&#32;&#32;{
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;val;
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(13),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(mem));
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
421 &#32;&#32;&#32;&#32;}
422 
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*user_realloc(<emphasis role="keywordtype">void</emphasis>&#32;*mem,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)
424 &#32;&#32;&#32;&#32;{
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*val;
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(20),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(size),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(mem)
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
431 
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
433 &#32;&#32;&#32;&#32;};
434 
435 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*user_unmap(<emphasis role="keywordtype">void</emphasis>&#32;*base,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;offset,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)
436 &#32;&#32;&#32;&#32;{
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*val;
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(26),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(base),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(offset),&#32;<emphasis role="stringliteral">&quot;S&quot;</emphasis>(size));
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
443 &#32;&#32;&#32;&#32;};
444 
445 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_unionufile__t">ufile_t</link>&#32;load_file(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)
446 &#32;&#32;&#32;&#32;{
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_unionufile__t">ufile_t</link>&#32;uf;
448 
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=A&quot;</emphasis>(uf.raw)
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(27),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(path));
453 
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;uf;
455 &#32;&#32;&#32;&#32;};
456 
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;GetScreenSize()
458 &#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;retval;
460 
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(retval)
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(61),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1));
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retval;
466 &#32;&#32;&#32;&#32;}
467 
468 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;get_proc_info(<emphasis role="keywordtype">char</emphasis>&#32;*info)
469 &#32;&#32;&#32;&#32;{
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(9),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(info),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(-1)
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
475 &#32;&#32;&#32;&#32;};
476 
477 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Blit(<emphasis role="keywordtype">void</emphasis>&#32;*bitmap,&#32;<emphasis role="keywordtype">int</emphasis>&#32;dst_x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;dst_y,
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;src_x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;src_y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;src_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;src_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;stride)
480 &#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structblit__call">blit_call</link>&#32;bc;
482 
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.dstx&#32;=&#32;dst_x;
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.dsty&#32;=&#32;dst_y;
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.w&#32;=&#32;w;
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.h&#32;=&#32;h;
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.srcx&#32;=&#32;src_x;
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.srcy&#32;=&#32;src_y;
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.srcw&#32;=&#32;src_w;
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.srch&#32;=&#32;src_h;
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.stride&#32;=&#32;stride;
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bc.bitmap&#32;=&#32;bitmap;
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(73),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(0),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(&amp;bc.dstx));
496 &#32;&#32;&#32;&#32;};
497 
498 <emphasis role="comment">//&#32;newlib&#32;exclusive</emphasis>
499 <emphasis role="preprocessor">#ifndef&#32;__TINYC__</emphasis>
500 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;create_thread(<emphasis role="keywordtype">int</emphasis>&#32;(*proc)(<emphasis role="keywordtype">void</emphasis>&#32;*param),&#32;<emphasis role="keywordtype">void</emphasis>&#32;*param,&#32;<emphasis role="keywordtype">int</emphasis>&#32;stack_size);
501 
502 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*load_library(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name);
503 
504 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*get_proc_address(<emphasis role="keywordtype">void</emphasis>&#32;*handle,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*proc_name);
505 
506 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;enumerate_libraries(<emphasis role="keywordtype">int</emphasis>&#32;(*callback)(<emphasis role="keywordtype">void</emphasis>&#32;*handle,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name,
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;base,&#32;uint32_t&#32;size,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*user_data),
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*user_data);
509 <emphasis role="preprocessor">#endif</emphasis>
510 
513 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Siemargl&#32;addenium</emphasis>
514 
515 <emphasis role="preprocessor">#define&#32;X_Y(x,&#32;y)&#32;(((x)&#32;&lt;&lt;&#32;16)&#32;|&#32;(y))</emphasis>
516 
517 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;KOLIBRI_GUI_EVENTS
518 &#32;&#32;&#32;&#32;{
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_NONE&#32;=&#32;0,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Event&#32;queue&#32;is&#32;empty&#32;*/</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_REDRAW&#32;=&#32;1,&#32;&#32;&#32;<emphasis role="comment">/*&#32;Window&#32;and&#32;window&#32;elements&#32;should&#32;be&#32;redrawn&#32;*/</emphasis>
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_KEY&#32;=&#32;2,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;A&#32;key&#32;on&#32;the&#32;keyboard&#32;was&#32;pressed&#32;*/</emphasis>
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_BUTTON&#32;=&#32;3,&#32;&#32;&#32;<emphasis role="comment">/*&#32;A&#32;button&#32;was&#32;clicked&#32;with&#32;the&#32;mouse&#32;*/</emphasis>
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_DESKTOP&#32;=&#32;5,&#32;&#32;<emphasis role="comment">/*&#32;Desktop&#32;redraw&#32;finished&#32;*/</emphasis>
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_MOUSE&#32;=&#32;6,&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Mouse&#32;activity&#32;(movement,&#32;button&#32;press)&#32;was&#32;detected&#32;*/</emphasis>
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_IPC&#32;=&#32;7,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Interprocess&#32;communication&#32;notify&#32;*/</emphasis>
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_NETWORK&#32;=&#32;8,&#32;&#32;<emphasis role="comment">/*&#32;Network&#32;event&#32;*/</emphasis>
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_DEBUG&#32;=&#32;9,&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Debug&#32;subsystem&#32;event&#32;*/</emphasis>
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KOLIBRI_EVENT_IRQBEGIN&#32;=&#32;16&#32;<emphasis role="comment">/*&#32;16..31&#32;IRQ0..IRQ15&#32;interrupt&#32;=IRQBEGIN+IRQn&#32;*/</emphasis>
529 &#32;&#32;&#32;&#32;};
530 
531 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;control_keys
532 &#32;&#32;&#32;&#32;{
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KM_SHIFT&#32;=&#32;0x00010000,
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KM_CTRL&#32;=&#32;0x00020000,
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KM_ALT&#32;=&#32;0x00040000,
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KM_NUMLOCK&#32;=&#32;0x00080000
537 &#32;&#32;&#32;&#32;};
538 
539 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__attribute__((__packed__))&#32;fs_dirinfo
540 &#32;&#32;&#32;&#32;{
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;subfn;&#32;<emphasis role="comment">//&#32;1&#32;read&#32;dir</emphasis>
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;start;
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;flags;
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;size;
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;retval;
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union</emphasis>
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__attribute__((__packed__))
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;zero;&#32;<emphasis role="comment">//&#32;0</emphasis>
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ppath;
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;path[5];&#32;<emphasis role="comment">//&#32;up&#32;to&#32;4096</emphasis>
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
555 &#32;&#32;&#32;&#32;};
556 
557 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;sf_file(<emphasis role="keywordtype">int</emphasis>&#32;subfn,&#32;<emphasis role="keyword">struct</emphasis>&#32;fs_dirinfo&#32;*dinfo)
560 &#32;&#32;&#32;&#32;{
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;retval;
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dinfo-&gt;subfn&#32;=&#32;subfn;
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&#32;&quot;</emphasis>
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(retval)
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(70),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(dinfo)
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:);
569 
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retval;
571 &#32;&#32;&#32;&#32;};
572 
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfs__dirheader">fs_dirheader</link>
574 &#32;&#32;&#32;&#32;{
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;version;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;curn_blocks;&#32;<emphasis role="comment">//&#32;number&#32;of&#32;read&#32;dir&#32;items&#32;(BDFE)</emphasis>
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;totl_blocks;&#32;<emphasis role="comment">//&#32;directory&#32;full&#32;size</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;other[20];&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reserved&#32;0</emphasis>
579 &#32;&#32;&#32;&#32;};
580 
581 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;filetype
582 &#32;&#32;&#32;&#32;{
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FS_RONLY&#32;=&#32;1,
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FS_HIDDEN&#32;=&#32;2,
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FS_SYSTEM&#32;=&#32;4,
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FS_VOLID&#32;=&#32;8,
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FS_SUBDIR&#32;=&#32;16,
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FS_FOLDER&#32;=&#32;16,
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FS_ARCHIV&#32;=&#32;32
590 &#32;&#32;&#32;&#32;};
591 
592 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__attribute__((__packed__))&#32;fs_filetime
593 &#32;&#32;&#32;&#32;{
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;sec;
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;mm;
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;hour;
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;zero;
598 &#32;&#32;&#32;&#32;};
599 
600 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__attribute__((__packed__))&#32;fs_filedate
601 &#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;day;
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;month;
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;year;
605 &#32;&#32;&#32;&#32;};
606 
608 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfs_b_d_f_e">fsBDFE</link>
609 &#32;&#32;&#32;&#32;{
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;filetype;
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;encoding;&#32;<emphasis role="comment">//&#32;0&#32;-&#32;cp866,&#32;1&#32;-&#32;utf16le</emphasis>
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filetime&#32;tm_created;
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filedate&#32;dt_created;
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filetime&#32;tm_accessed;
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filedate&#32;dt_accessed;
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filetime&#32;tm_modified;
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filedate&#32;dt_modified;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;size;
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;fname[264];
620 &#32;&#32;&#32;&#32;};&#32;<emphasis role="comment">//&#32;must&#32;be&#32;sized&#32;304</emphasis>
621 
623 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfs_b_d_f_e__16">fsBDFE_16</link>
624 &#32;&#32;&#32;&#32;{
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;filetype;
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;encoding;&#32;<emphasis role="comment">//&#32;0&#32;-&#32;cp866,&#32;1&#32;-&#32;utf16le</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filetime&#32;tm_created;
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filedate&#32;dt_created;
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filetime&#32;tm_accessed;
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filedate&#32;dt_accessed;
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filetime&#32;tm_modified;
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fs_filedate&#32;dt_modified;
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;size;
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;fname[260];
635 &#32;&#32;&#32;&#32;};&#32;<emphasis role="comment">//&#32;must&#32;be&#32;sized&#32;560</emphasis>
636 
637 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copied&#32;from&#32;/programs/system/shell/system/kolibri.c</emphasis>
638 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fn&apos;s&#32;returned&#32;-1&#32;as&#32;syserror,&#32;1&#32;as&#32;error,&#32;0&#32;as&#32;OK</emphasis>
639 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kol_clip_num()
640 &#32;&#32;&#32;&#32;{
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;val;
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(54),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(0));
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
644 &#32;&#32;&#32;&#32;}
645 
646 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*kol_clip_get(<emphasis role="keywordtype">int</emphasis>&#32;n)
647 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returned&#32;buffer&#32;must&#32;be&#32;freed&#32;by&#32;user_free()</emphasis>
648 &#32;&#32;&#32;&#32;{
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*val;
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(54),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(n));
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
652 &#32;&#32;&#32;&#32;}
653 
654 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kol_clip_set(<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[])
655 &#32;&#32;&#32;&#32;{
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;val;
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(54),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(2),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(n),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(buffer));
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
659 &#32;&#32;&#32;&#32;}
660 
661 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kol_clip_pop()
662 &#32;&#32;&#32;&#32;{
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;val;
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(54),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(3));
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
666 &#32;&#32;&#32;&#32;}
667 
668 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kol_clip_unlock()
669 &#32;&#32;&#32;&#32;{
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;val;
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(54),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(4));
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
673 &#32;&#32;&#32;&#32;}
674 
675 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;get_system_colors(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structkolibri__system__colors">kolibri_system_colors</link>&#32;*color_table)
676 &#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(48),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(3),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(color_table),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(40));
680 
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;color_table&#32;should&#32;point&#32;to&#32;the&#32;system&#32;color&#32;table&#32;*/</emphasis>
682 &#32;&#32;&#32;&#32;}
683 
684 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_board_write_byte(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ch)
685 &#32;&#32;&#32;&#32;{
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(63),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(ch));
690 &#32;&#32;&#32;&#32;}
691 
692 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;draw_number_sys(int32_t&#32;number,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;len,&#32;color_t&#32;color)
693 &#32;&#32;&#32;&#32;{
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;fmt;
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmt&#32;=&#32;len&#32;&lt;&lt;&#32;16&#32;|&#32;0x80000000;&#32;<emphasis role="comment">//&#32;no&#32;leading&#32;zeros&#32;+&#32;width</emphasis>
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;fmt&#32;=&#32;len&#32;&lt;&lt;&#32;16&#32;|&#32;0x00000000;&#32;//&#32;&#32;leading&#32;zeros&#32;+&#32;width</emphasis>
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(47),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(fmt),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>((x&#32;&lt;&lt;&#32;16)&#32;|&#32;y),&#32;<emphasis role="stringliteral">&quot;S&quot;</emphasis>(color));
701 &#32;&#32;&#32;&#32;}
702 
703 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_mouse_eventstate(<emphasis role="keywordtype">void</emphasis>)
704 &#32;&#32;&#32;&#32;{
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;val;
706 
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(37),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(3));
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
712 &#32;&#32;&#32;&#32;};
713 
714 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;set_event_mask(uint32_t&#32;mask)
715 &#32;&#32;&#32;&#32;{
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;val;
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(40),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(mask));
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
719 &#32;&#32;&#32;&#32;}
720 
721 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*thread_proc)(<emphasis role="keywordtype">void</emphasis>&#32;*);
722 
723 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;start_thread(thread_proc&#32;proc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*stack_top)
724 &#32;&#32;&#32;&#32;{
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;val;
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(51),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(proc),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(stack_top));
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
728 &#32;&#32;&#32;&#32;}
729 
730 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;kos_exit()
731 &#32;&#32;&#32;&#32;{
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(-1));
733 &#32;&#32;&#32;&#32;}
734 
735 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;focus_window(<emphasis role="keywordtype">int</emphasis>&#32;slot)
736 &#32;&#32;&#32;&#32;{
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(18),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(3),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(slot));
738 &#32;&#32;&#32;&#32;}
739 
740 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;get_thread_slot(<emphasis role="keywordtype">int</emphasis>&#32;tid)
741 &#32;&#32;&#32;&#32;{
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;val;
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(18),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(21),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(tid));
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
745 &#32;&#32;&#32;&#32;}
746 
747 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_current_folder(<emphasis role="keywordtype">char</emphasis>&#32;*dir)
748 &#32;&#32;&#32;&#32;{
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(30),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(dir));
750 &#32;&#32;&#32;&#32;}
751 
752 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;get_current_folder(<emphasis role="keywordtype">char</emphasis>&#32;*buf,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bufsize)
753 &#32;&#32;&#32;&#32;{
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;val;
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(30),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(2),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(buf),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(bufsize));
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
757 &#32;&#32;&#32;&#32;}
758 
759 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ipc_set_area(<emphasis role="keywordtype">void</emphasis>&#32;*buf,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bufsize)
760 &#32;&#32;&#32;&#32;{
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(60),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(1),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(buf),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(bufsize));
762 &#32;&#32;&#32;&#32;}
763 
764 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ipc_send_message(<emphasis role="keywordtype">int</emphasis>&#32;pid_reciever,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;datalen)
765 &#32;&#32;&#32;&#32;{
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;val;
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(60),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(2),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(pid_reciever),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(data),&#32;<emphasis role="stringliteral">&quot;S&quot;</emphasis>(datalen));
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
769 &#32;&#32;&#32;&#32;}
770 
771 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*shm_open(<emphasis role="keywordtype">char</emphasis>&#32;*shm_name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;msize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;flags,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*retsz)
772 &#32;&#32;&#32;&#32;{
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;val,&#32;cod;
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val),&#32;<emphasis role="stringliteral">&quot;=d&quot;</emphasis>(cod)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(22),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(shm_name),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(msize),&#32;<emphasis role="stringliteral">&quot;S&quot;</emphasis>(flags));
775 
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(retsz)
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*retsz&#32;=&#32;cod;&#32;<emphasis role="comment">//&#32;errcode&#32;if&#32;NULL&#32;or&#32;memsize&#32;when&#32;open</emphasis>
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)val;
779 &#32;&#32;&#32;&#32;}
780 
781 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;shm_close(<emphasis role="keywordtype">char</emphasis>&#32;*shm_name)
782 &#32;&#32;&#32;&#32;{
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;::<emphasis role="stringliteral">&quot;a&quot;</emphasis>(68),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(23),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(shm_name));
784 &#32;&#32;&#32;&#32;}
785 
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;start_app(<emphasis role="keywordtype">char</emphasis>&#32;*app_name,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*args)
787 &#32;&#32;&#32;&#32;{
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_op_t&#32;file_op;
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;file_op,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(file_op));
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_op.fn&#32;=&#32;7;
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_op.args&#32;=&#32;args;
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_op.app_name&#32;=&#32;app_name;
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">register</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;val;
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x40&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(val)&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(70),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(&amp;file_op));
796 
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
798 &#32;&#32;&#32;&#32;}
799 
800 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;get_control_keys(<emphasis role="keywordtype">void</emphasis>)
801 &#32;&#32;&#32;&#32;{
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;ctrl;
803 
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&#32;\n\t&quot;</emphasis>
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(ctrl)
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(66),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(3));
808 
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ctrl;
810 &#32;&#32;&#32;&#32;};
811 
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;get_keyboard_layout(<emphasis role="keywordtype">int</emphasis>&#32;opt,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buf)
815 &#32;&#32;&#32;&#32;{
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_namespace_kolibri_lib_1_1_o_s_1ad74e24145535693721b73b3d7f315c45">lang</link>;
817 
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;int&#32;$0x40&#32;\n\t&quot;</emphasis>
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=a&quot;</emphasis>(<link linkend="_namespace_kolibri_lib_1_1_o_s_1ad74e24145535693721b73b3d7f315c45">lang</link>)
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>(26),&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>(2),&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>(opt),&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>(buf));
822 
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_kolibri_lib_1_1_o_s_1ad74e24145535693721b73b3d7f315c45">lang</link>;
824 &#32;&#32;&#32;&#32;};
825 
826 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;font_size(<emphasis role="keywordtype">int</emphasis>&#32;color)
829 &#32;&#32;&#32;&#32;{
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;font&#32;=&#32;color&#32;&gt;&gt;&#32;24;
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;font_multipl&#32;=&#32;(font&#32;&amp;&#32;7)&#32;+&#32;1;
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;width_sym,&#32;hight_sym;
833 
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(font&#32;&amp;&#32;0x10)&#32;<emphasis role="comment">//&#32;8x16</emphasis>
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;width_sym&#32;=&#32;8&#32;*&#32;font_multipl;
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hight_sym&#32;=&#32;16&#32;*&#32;font_multipl;
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;6x9</emphasis>
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;width_sym&#32;=&#32;6&#32;*&#32;font_multipl;
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hight_sym&#32;=&#32;9&#32;*&#32;font_multipl;
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hight_sym&#32;+&#32;(width_sym&#32;&lt;&lt;&#32;16);
845 &#32;&#32;&#32;&#32;}
846 
847 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
848 <emphasis role="comment">&#32;&#32;&#32;&#32;static&#32;inline&#32;char&#32;*getcwd(char&#32;*buf,&#32;size_t&#32;size)</emphasis>
849 <emphasis role="comment">&#32;&#32;&#32;&#32;{</emphasis>
850 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;rc&#32;=&#32;get_current_folder(buf,&#32;size);</emphasis>
851 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(rc&#32;&gt;&#32;size)</emphasis>
852 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
853 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errno&#32;=&#32;ERANGE;</emphasis>
854 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;</emphasis>
855 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
856 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
857 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;buf;</emphasis>
858 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
859 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
860 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;finished</emphasis>
861 <emphasis role="comment">&#32;&#32;&#32;&#32;void&#32;staticnum_draw(staticnum&#32;*st)</emphasis>
862 <emphasis role="comment">&#32;&#32;&#32;&#32;{</emphasis>
863 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;register&#32;uint32_t&#32;fmt;</emphasis>
864 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(st-&gt;width&#32;&lt;&#32;0)</emphasis>
865 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmt&#32;=&#32;(-st-&gt;width&#32;&lt;&lt;&#32;16);&#32;//&#32;leading&#32;zeros,&#32;decimal</emphasis>
866 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
867 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmt&#32;=&#32;(st-&gt;width&#32;&lt;&lt;&#32;16)&#32;|&#32;0x80000000;&#32;//&#32;no&#32;leading&#32;zeros,&#32;decimal</emphasis>
868 <emphasis role="comment"></emphasis>
869 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(</emphasis>
870 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;int&#32;$0x40&quot;</emphasis>
871 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::&quot;a&quot;(47),</emphasis>
872 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;b&quot;(fmt),</emphasis>
873 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;c&quot;(st-&gt;number),</emphasis>
874 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;d&quot;(st-&gt;start_xy),</emphasis>
875 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;S&quot;(st-&gt;color_flags),</emphasis>
876 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;D&quot;(st-&gt;bg_color)</emphasis>
877 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:);</emphasis>
878 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
879 <emphasis role="comment"></emphasis>
880 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
882 
883 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;added&#32;nonstatic&#32;inline&#32;because&#32;incomfortabre&#32;stepping&#32;in&#32;in&#32;debugger</emphasis>
884 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__attribute__((noinline))&#32;debug_board_write_str(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str);
885 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__attribute__((noinline))&#32;debug_board_printf(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*format,&#32;...);
886 
887 <emphasis role="comment">/*&#32;copy&#32;body&#32;to&#32;only&#32;one&#32;project&#32;file</emphasis>
888 <emphasis role="comment">void&#32;__attribute__&#32;((noinline))&#32;debug_board_write_str(const&#32;char*&#32;str){</emphasis>
889 <emphasis role="comment">&#32;&#32;while(*str)</emphasis>
890 <emphasis role="comment">&#32;&#32;&#32;&#32;debug_board_write_byte(*str++);</emphasis>
891 <emphasis role="comment">}</emphasis>
892 <emphasis role="comment"></emphasis>
893 <emphasis role="comment">void&#32;__attribute__&#32;((noinline))&#32;debug_board_printf(const&#32;char&#32;*format,...)</emphasis>
894 <emphasis role="comment">{</emphasis>
895 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va_list&#32;ap;</emphasis>
896 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char&#32;log_board[300];</emphasis>
897 <emphasis role="comment"></emphasis>
898 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va_start&#32;(ap,&#32;format);</emphasis>
899 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vsnprintf(log_board,&#32;sizeof&#32;log_board,&#32;format,&#32;ap);</emphasis>
900 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va_end(ap);</emphasis>
901 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debug_board_write_str(log_board);</emphasis>
902 <emphasis role="comment">}</emphasis>
903 <emphasis role="comment"></emphasis>
904 <emphasis role="comment">__attribute__&#32;((noinline))&#32;void&#32;trap(int&#32;n)</emphasis>
905 <emphasis role="comment">{</emphasis>
906 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;nothing&#32;todo,&#32;just&#32;see&#32;n&#32;in&#32;debugger.&#32;use&#32;&quot;bp&#32;trap&quot;&#32;command</emphasis>
907 <emphasis role="comment">&#32;&#32;&#32;&#32;__asm__&#32;__volatile__(</emphasis>
908 <emphasis role="comment">&#32;&#32;&#32;&#32;&quot;nop&quot;</emphasis>
909 <emphasis role="comment">&#32;&#32;&#32;&#32;:</emphasis>
910 <emphasis role="comment">&#32;&#32;&#32;&#32;:&quot;a&quot;(n));</emphasis>
911 <emphasis role="comment">}</emphasis>
912 <emphasis role="comment"></emphasis>
913 <emphasis role="comment">*/</emphasis>
914 
915 <emphasis role="comment">//&#32;TinyC&#32;don&apos;t&#32;support&#32;aliasing&#32;of&#32;static&#32;inline&#32;funcs</emphasis>
916 <emphasis role="preprocessor">#ifndef&#32;__TINYC__</emphasis>
917 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;BeginDraw(<emphasis role="keywordtype">void</emphasis>)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;begin_draw&quot;</emphasis>)));
918 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;EndDraw(<emphasis role="keywordtype">void</emphasis>)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;end_draw&quot;</emphasis>)));
919 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawWindow(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name,
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_t&#32;workcolor,&#32;uint32_t&#32;style)
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;sys_create_window&quot;</emphasis>)));
922 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DefineButton(<emphasis role="keywordtype">void</emphasis>)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;define_button&quot;</emphasis>)));
923 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawLine(<emphasis role="keywordtype">int</emphasis>&#32;xs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ys,&#32;<emphasis role="keywordtype">int</emphasis>&#32;xe,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ye,&#32;color_t&#32;color)
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;draw_line&quot;</emphasis>)));
925 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawBar(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;color_t&#32;color)
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;draw_bar&quot;</emphasis>)));
927 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawBitmap(<emphasis role="keywordtype">void</emphasis>&#32;*bitmap,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h)
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;draw_bitmap&quot;</emphasis>)));
929 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;GetSkinHeight(<emphasis role="keywordtype">void</emphasis>)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;get_skin_height&quot;</emphasis>)));
930 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;pos_t&#32;GetMousePos(<emphasis role="keywordtype">int</emphasis>&#32;origin)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;get_mouse_pos&quot;</emphasis>)));
931 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;GetMouseButtons(<emphasis role="keywordtype">void</emphasis>)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;get_mouse_buttons&quot;</emphasis>)));
932 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;GetMouseWheels(<emphasis role="keywordtype">void</emphasis>)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;get_mouse_wheels&quot;</emphasis>)));
933 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;LoadCursor(<emphasis role="keywordtype">void</emphasis>&#32;*path,&#32;uint32_t&#32;flags)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;load_cursor&quot;</emphasis>)));
934 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;SetCursor(uint32_t&#32;cursor)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;set_cursor&quot;</emphasis>)));
935 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;DestroyCursor(uint32_t&#32;cursor)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;destroy_cursor&quot;</emphasis>)));
936 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;uint32_t&#32;GetOsEvent(<emphasis role="keywordtype">void</emphasis>)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;get_os_event&quot;</emphasis>)));
937 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*UserAlloc(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;user_alloc&quot;</emphasis>)));
938 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;UserFree(<emphasis role="keywordtype">void</emphasis>&#32;*mem)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;user_free&quot;</emphasis>)));
939 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*UserRealloc(<emphasis role="keywordtype">void</emphasis>&#32;*mem,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;user_realloc&quot;</emphasis>)));
940 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*UserUnmap(<emphasis role="keywordtype">void</emphasis>&#32;*base,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;offset,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;user_unmap&quot;</emphasis>)));
941 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_unionufile__t">ufile_t</link>&#32;LoadFile(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;load_file&quot;</emphasis>)));
942 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetProcInfo(<emphasis role="keywordtype">char</emphasis>&#32;*info)&#32;__attribute__((alias(<emphasis role="stringliteral">&quot;get_proc_info&quot;</emphasis>)));
943 <emphasis role="preprocessor">#endif</emphasis>
944 
945 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
946 }
947 <emphasis role="preprocessor">#endif</emphasis>
948 
949 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
