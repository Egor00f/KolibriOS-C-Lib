<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button" xml:lang="en-US">
<title>KolibriLib::UI::buttons::Button Class Reference</title>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary></indexterm>
<para>

<para>Класс для работы с кнопками </para>
 
</para>
<para>
<computeroutput>#include &lt;button.hpp&gt;</computeroutput>
</para>
<para>Inheritance diagram for KolibriLib::UI::buttons::Button:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a0f3e15d49006599b71c2b5e913397440"/>enum <emphasis role="strong">Type</emphasis> { <emphasis role="strong">Image</emphasis> = 0
, <emphasis role="strong">Text</emphasis>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1aaa98f04affa5c850dbd5ad3faa3c6aa4">Button</link> (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp;coord={0, 0}, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp;size={20, 20}, unsigned Margin=UI::DefaultMargin, <link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> ButtonColor=OS::sys_color_table.work_button)</para>

<para>Это конструктор </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a81904ddeac359eb10d23b8d76818f236">init</link> (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp;coord={0, 0}, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp;size={0, 0}, const std::string &amp;text=&quot;button&quot;, const unsigned &amp;Margin=UI::DefaultMargin, const <link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> &amp;ButtonColor=OS::sys_color_table.work_button)</para>

<para>инициализировать параметры </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1aa93163b009993db9a67df67ad9653bc5">init</link> (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp;coord={0, 0}, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp;size={0, 0}, const <link linkend="_class_kolibri_lib_1_1_u_i_1_1_images_1_1_image">Images::Image</link> &amp;image=<link linkend="_class_kolibri_lib_1_1_u_i_1_1_images_1_1_image">Images::Image</link>(), const unsigned &amp;Margin=DefaultMargin, const <link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> &amp;ButtonColor=OS::sys_color_table.work_button)</para>

<para>инициализировать параметры </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a4bcd9cdb3b727f490587f14c15d135f4">init</link> (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp;coord={0, 0}, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp;size={0, 0}, std::string Path=DefaultImage)</para>

<para>инициализировать параметры </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a2d359db5c5aaa43f1a28c46d0d00d8a8"/>void <emphasis role="strong">Render</emphasis> ()</para>

<para>Отрисовать кнопку </para>
</listitem>
            <listitem><para>bool <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a018ac30303a5b12365f5251f5771bf6f">Handler</link> ()</para>

<para>Обработчик кнопки </para>
</listitem>
            <listitem><para>bool <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a3f8517f74b2049f07a9da9a9910e9814">GetStatus</link> () const</para>

<para>Получить сосояние кнопки на момент последней обработки </para>
</listitem>
            <listitem><para>ButtonID <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a45ea9d51be9d17f6afca47ecfd6bdee6">GetId</link> () const</para>

<para>Получить номер кнопки </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a0a235265d209cec4e8f735d416d25505">Deactivate</link> ()</para>

<para>Деактивировать кнопку </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a65b6a0809e8e43892e48065708fa01d1">Activate</link> ()</para>

<para>Активировать кнопку </para>
</listitem>
            <listitem><para>unsigned <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1aee40bbc992414d695c0800f7d903f05e">GetType</link> () const</para>

<para>Возвращает тип данных используемых в кнопке <link linkend="_">_type.</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a4387a38fa0a7b981c3a2cea4730704db">GetTextLabel</link> () const</para>

<para>Возвращает текст кнопки </para>
</listitem>
            <listitem><para><link linkend="_class_kolibri_lib_1_1_u_i_1_1_images_1_1_image">Images::Image</link> <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a7d647394cc692e8dba0dd118c6dcdf63">GetImage</link> () const</para>

<para>Получить изображение кнопки </para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a159f389b9845713368e763ce159c77d7">SetText</link> (std::string NewText)</para>

<para>Изменить текст кнопки </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a3dddb0a58edf4d60a2bc539859fea95b"/><emphasis role="strong">~Button</emphasis> ()</para>

<para>Декструктор </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1af82a283646f3b2b3be2c60018cf636f2"/><link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button">Button</link> &amp; <emphasis role="strong">operator=</emphasis> (const <link linkend="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button">Button</link> &amp;element)</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element">KolibriLib::UI::UIElement</link>        <itemizedlist>
            <listitem><para><link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element_1a311aecf3edea3bce6cc3c46038d7a1e0">UIElement</link> (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp;coord={0, 0}, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp;size={16, 16}, const <link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> &amp;MainColor=OS::sys_color_table.work_graph, const unsigned &amp;Margin=DefaultMargin, bool relative=false)</para>

<para>конструктор </para>
</listitem>
            <listitem><para><link linkend="_struct_kolibri_lib_1_1point">Size</link> <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element_1ab591105fdaaaece609203d9088948847">GetSize</link> () const</para>

<para>Получить размер элемента </para>
</listitem>
            <listitem><para>void <emphasis role="strong">SetSize</emphasis> (<link linkend="_struct_kolibri_lib_1_1point">Size</link> NewSize)</para>
</listitem>
            <listitem><para>unsigned <emphasis role="strong">GetMargin</emphasis> () const</para>
</listitem>
            <listitem><para><link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element_1a79e0daa11205956c3ad4b64424597aea">GetColor</link> () const</para>

<para>Получить осносной цвет элемента </para>
</listitem>
            <listitem><para>void <emphasis role="strong">SetColor</emphasis> (<link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> NewColor)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">SetCoord</emphasis> (<link linkend="_struct_kolibri_lib_1_1point">Coord</link> NewCoord)</para>
</listitem>
            <listitem><para><link linkend="_struct_kolibri_lib_1_1point">Coord</link> <emphasis role="strong">GetCoord</emphasis> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element_1a983464b962931621091affaa11f0472a">Rotate</link> (unsigned NewAngle)</para>

<para>Повернуть элемент </para>
</listitem>
            <listitem><para>unsigned <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element_1a91df2001fe6967e760d343e42f5d870c">GetRotate</link> () const</para>

<para>Получить угол наклона элемента </para>
</listitem>
            <listitem><para>bool <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element_1a56465e500c5b8e95d57c09549da98342">Hover</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element">UIElement</link> &amp; <emphasis role="strong">operator=</emphasis> (const <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element">UIElement</link> &amp;Element)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">operator==</emphasis> (const <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element">UIElement</link> &amp;Element) const</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">operator!=</emphasis> (const <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element">UIElement</link> &amp;Element) const</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Protected Attributes inherited from <link linkend="_class_kolibri_lib_1_1_u_i_1_1_u_i_element">KolibriLib::UI::UIElement</link>        <itemizedlist>
            <listitem><para><link linkend="_struct_kolibri_lib_1_1point">Coord</link> <emphasis role="strong">_coord</emphasis></para>

<para>Координаты </para>
</listitem>
            <listitem><para><link linkend="_struct_kolibri_lib_1_1point">Size</link> <emphasis role="strong">_size</emphasis></para>

<para>Размер </para>
</listitem>
            <listitem><para><link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> <emphasis role="strong">_MainColor</emphasis></para>
</listitem>
            <listitem><para>unsigned <emphasis role="strong">_Margin</emphasis></para>

<para>Отступы </para>
</listitem>
            <listitem><para>unsigned <emphasis role="strong">_angle</emphasis></para>

<para>Угол наклона </para>
</listitem>
            <listitem><para>bool <emphasis role="strong">_relative</emphasis></para>

<para>Оносительн </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Класс для работы с кнопками </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1aaa98f04affa5c850dbd5ad3faa3c6aa4"/><section>
    <title>Button()</title>
<indexterm><primary>Button</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>Button</secondary></indexterm>
<para><computeroutput>KolibriLib::UI::buttons::Button::Button (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp; coord = <computeroutput>{0,&#160;0}</computeroutput>
, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp; size = <computeroutput>{20,&#160;20}</computeroutput>
, unsigned Margin = <computeroutput>UI::DefaultMargin</computeroutput>
, <link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> ButtonColor = <computeroutput>OS::sys_color_table.work_button</computeroutput>
)</computeroutput></para><para>

<para>Это конструктор </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>coord</entry><entry>
<para>координата </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>размер </para>
</entry>
                            </row>
                            <row>
<entry>text</entry><entry>
<para>текст </para>
</entry>
                            </row>
                            <row>
<entry>Margin</entry><entry>
<para>отступы текста от границ </para>
</entry>
                            </row>
                            <row>
<entry>ButtonColor</entry><entry>
<para>цвет кнопки </para>
</entry>
                            </row>
                            <row>
<entry>TextColor</entry><entry>
<para>цвет текста </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a65b6a0809e8e43892e48065708fa01d1"/><section>
    <title>Activate()</title>
<indexterm><primary>Activate</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>Activate</secondary></indexterm>
<para><computeroutput>void KolibriLib::UI::buttons::Button::Activate ( )</computeroutput></para><para>

<para>Активировать кнопку </para>
</para>
<section xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1Противоположна">
<title><title>функции <link linkend="_">возвращает кнопку в рабочее состояние</link></title></title>
</section>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a0a235265d209cec4e8f735d416d25505"/><section>
    <title>Deactivate()</title>
<indexterm><primary>Deactivate</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>Deactivate</secondary></indexterm>
<para><computeroutput>void KolibriLib::UI::buttons::Button::Deactivate ( )</computeroutput></para><para>

<para>Деактивировать кнопку </para>
</para>
<section xml:id="_namespace_kolibri_lib_1_1_u_i_1_1buttons_1Эта">
<title><title>функция может выполнятся очень долго, если вы уже создали довольно много кнопок. Это становится действительно важно когда у вас объявленно более 2000 кнопок</title></title>
</section>
<section xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1В">
<title><title>Деактивированном состоянии кнопка &quot;Не нажимается&quot;, а её <link linkend="_a59988b09eab8a3acdbe8bd1d93b3d931">становится не действительным</link></title></title>
</section>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a45ea9d51be9d17f6afca47ecfd6bdee6"/><section>
    <title>GetId()</title>
<indexterm><primary>GetId</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>GetId</secondary></indexterm>
<para><computeroutput>buttons::ButtonID KolibriLib::UI::buttons::Button::GetId ( ) const</computeroutput></para><para>

<para>Получить номер кнопки </para>
</para>

<para><formalpara><title>Returns</title>

<para><link linkend="_a59988b09eab8a3acdbe8bd1d93b3d931">_id</link></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a7d647394cc692e8dba0dd118c6dcdf63"/><section>
    <title>GetImage()</title>
<indexterm><primary>GetImage</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>GetImage</secondary></indexterm>
<para><computeroutput><link linkend="_class_kolibri_lib_1_1_u_i_1_1_images_1_1_image">Images::Image</link> KolibriLib::UI::buttons::Button::GetImage ( ) const</computeroutput></para><para>

<para>Получить изображение кнопки </para>
</para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a3f8517f74b2049f07a9da9a9910e9814"/><section>
    <title>GetStatus()</title>
<indexterm><primary>GetStatus</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>GetStatus</secondary></indexterm>
<para><computeroutput>bool KolibriLib::UI::buttons::Button::GetStatus ( ) const</computeroutput></para><para>

<para>Получить сосояние кнопки на момент последней обработки </para>
</para>

<para><formalpara><title>Returns</title>

<para><link linkend="_acb97605ce20e14775fa5cffdbe02ef5f">_status</link></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a4387a38fa0a7b981c3a2cea4730704db"/><section>
    <title>GetTextLabel()</title>
<indexterm><primary>GetTextLabel</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>GetTextLabel</secondary></indexterm>
<para><computeroutput>std::string KolibriLib::UI::buttons::Button::GetTextLabel ( ) const</computeroutput></para><para>

<para>Возвращает текст кнопки </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::string </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1aee40bbc992414d695c0800f7d903f05e"/><section>
    <title>GetType()</title>
<indexterm><primary>GetType</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>GetType</secondary></indexterm>
<para><computeroutput>unsigned KolibriLib::UI::buttons::Button::GetType ( ) const</computeroutput></para><para>

<para>Возвращает тип данных используемых в кнопке <link linkend="_">_type.</link></para>
</para>

<para><formalpara><title>Returns</title>

<para>Функция возвращает <link linkend="_">:: </link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a018ac30303a5b12365f5251f5771bf6f"/><section>
    <title>Handler()</title>
<indexterm><primary>Handler</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>Handler</secondary></indexterm>
<para><computeroutput>bool KolibriLib::UI::buttons::Button::Handler ( )</computeroutput></para><para>

<para>Обработчик кнопки </para>
</para>

<para><formalpara><title>Returns</title>

<para>Состояние кнопки(Нажата/Ненажата) </para>
</formalpara>
</para>
<section xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1устанавливает">
<title><title>переменную <link linkend="_acb97605ce20e14775fa5cffdbe02ef5f">в true если эта кнопка нажата, иначе false</link></title></title>
</section>
<section xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1Эту">
<title><title>функцию нужно вызывать в цикле, чтобы кнопка работала</title></title>
</section>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1aa93163b009993db9a67df67ad9653bc5"/><section>
    <title>init()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>init</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>init</secondary></indexterm>
<para><computeroutput>void KolibriLib::UI::buttons::Button::init (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp; coord = <computeroutput>{0,&#160;0}</computeroutput>
, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp; size = <computeroutput>{0,&#160;0}</computeroutput>
, const <link linkend="_class_kolibri_lib_1_1_u_i_1_1_images_1_1_image">Images::Image</link> &amp; image = <computeroutput><link linkend="_class_kolibri_lib_1_1_u_i_1_1_images_1_1_image">Images::Image</link>()</computeroutput>
, const unsigned &amp; Margin = <computeroutput>DefaultMargin</computeroutput>
, const <link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> &amp; ButtonColor = <computeroutput>OS::sys_color_table.work_button</computeroutput>
)</computeroutput></para><para>

<para>инициализировать параметры </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>coord</entry><entry>
<para>координата </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>размер </para>
</entry>
                            </row>
                            <row>
<entry>image</entry><entry>
<para>Изображение </para>
</entry>
                            </row>
                            <row>
<entry>Margin</entry><entry>
<para>отступы текста от границ </para>
</entry>
                            </row>
                            <row>
<entry>BackgroundColor</entry><entry>
<para>цвет кнопки </para>
</entry>
                            </row>
                            <row>
<entry>TextColor</entry><entry>
<para>цвет текста </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a81904ddeac359eb10d23b8d76818f236"/><section>
    <title>init()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>init</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>init</secondary></indexterm>
<para><computeroutput>void KolibriLib::UI::buttons::Button::init (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp; coord = <computeroutput>{0,&#160;0}</computeroutput>
, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp; size = <computeroutput>{0,&#160;0}</computeroutput>
, const std::string &amp; text = <computeroutput>&quot;button&quot;</computeroutput>
, const unsigned &amp; Margin = <computeroutput>UI::DefaultMargin</computeroutput>
, const <link linkend="_union_kolibri_lib_1_1_color_1_1_color">Color::Color</link> &amp; ButtonColor = <computeroutput>OS::sys_color_table.work_button</computeroutput>
)</computeroutput></para><para>

<para>инициализировать параметры </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>coord</entry><entry>
<para>координата </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>размер </para>
</entry>
                            </row>
                            <row>
<entry>text</entry><entry>
<para>текст </para>
</entry>
                            </row>
                            <row>
<entry>Margin</entry><entry>
<para>отступы текста от границ </para>
</entry>
                            </row>
                            <row>
<entry>BackgroundColor</entry><entry>
<para>цвет кнопки </para>
</entry>
                            </row>
                            <row>
<entry>TextColor</entry><entry>
<para>цвет текста </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a4bcd9cdb3b727f490587f14c15d135f4"/><section>
    <title>init()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>init</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>init</secondary></indexterm>
<para><computeroutput>void KolibriLib::UI::buttons::Button::init (const <link linkend="_struct_kolibri_lib_1_1point">Coord</link> &amp; coord = <computeroutput>{0,&#160;0}</computeroutput>
, const <link linkend="_struct_kolibri_lib_1_1point">Size</link> &amp; size = <computeroutput>{0,&#160;0}</computeroutput>
, std::string Path = <computeroutput>DefaultImage</computeroutput>
)</computeroutput></para><para>

<para>инициализировать параметры </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>coord</entry><entry>
<para>координата </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>размер </para>
</entry>
                            </row>
                            <row>
<entry>Path</entry><entry>
<para>Путь до изображения </para>
</entry>
                            </row>
                            <row>
<entry>Margin</entry><entry>
<para>отступы текста от границ </para>
</entry>
                            </row>
                            <row>
<entry>BackgroundColor</entry><entry>
<para>цвет кнопки </para>
</entry>
                            </row>
                            <row>
<entry>TextColor</entry><entry>
<para>цвет текста </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1_u_i_1_1buttons_1_1_button_1a159f389b9845713368e763ce159c77d7"/><section>
    <title>SetText()</title>
<indexterm><primary>SetText</primary><secondary>KolibriLib::UI::buttons::Button</secondary></indexterm>
<indexterm><primary>KolibriLib::UI::buttons::Button</primary><secondary>SetText</secondary></indexterm>
<para><computeroutput>void KolibriLib::UI::buttons::Button::SetText (std::string NewText)</computeroutput></para><para>

<para>Изменить текст кнопки </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Новый</entry><entry>
<para>текст кнопки </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
F:/KolibriOs/KolibriOS-Cpp-Lib/src/include/kolibriLib/button.hpp</section>
</section>
