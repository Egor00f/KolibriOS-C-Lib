<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_kolibri__rasterworks_8h_source" xml:lang="ru">
<title>kolibri_rasterworks.h</title>
<indexterm><primary>C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_rasterworks.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;KOLIBRI_RASTERWORKS_H</emphasis>
2 <emphasis role="preprocessor">#define&#32;KOLIBRI_RASTERWORKS_H</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&lt;sys/ksys.h&gt;</emphasis>
5 
6 
7 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>
8 {
9 
10 <emphasis role="keyword">enum</emphasis>&#32;RasterworksEncoding
11 {
12 &#32;&#32;&#32;&#32;Rasterworks_cp688&#32;=&#32;1,
13 &#32;&#32;&#32;&#32;Rasterworks_UTF8&#32;=&#32;2,
14 &#32;&#32;&#32;&#32;Rasterworks_UTF16LE&#32;=&#32;3,
15 };
16 
18 <emphasis role="keyword">enum</emphasis>&#32;RasterworksParams
19 {
21 &#32;&#32;Bold&#32;=&#32;0b1,
22 
24 &#32;&#32;Italic&#32;=&#32;0b10,
25 
27 &#32;&#32;Underline&#32;=&#32;0b100,
28 
30 &#32;&#32;StrikeThrough&#32;=&#32;0b1000,
31 
33 &#32;&#32;AlignRight&#32;=&#32;0b00010000,
34 
36 &#32;&#32;AlignCenter&#32;=&#32;0b00100000,
37 
39 &#32;&#32;Use32bit&#32;=&#32;0b010000000
40 };
41 
44 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kolibri_rasterworks_init(<emphasis role="keywordtype">void</emphasis>);
45 
54 hh&#32;-&#32;<emphasis role="keywordtype">char</emphasis>&#32;height&#32;&#32;\
55 ww&#32;-&#32;<emphasis role="keywordtype">char</emphasis>&#32;width&#32;;&#32;0&#32;=&#32;<emphasis role="keyword">auto</emphasis>&#32;(proportional)&#32;\
56 ee&#32;-&#32;encoding&#32;&#32;&#32;;&#32;1&#32;=&#32;cp866,&#32;2&#32;=&#32;UTF-16LE,&#32;3&#32;=&#32;UTF-8&#32;\
57 ff&#32;-&#32;Parameters&#32;from&#32;the&#32;RasterworksParams&#32;list
60 <emphasis role="keyword">extern</emphasis>&#32;void&#32;(*drawText)(<emphasis role="keywordtype">void</emphasis>&#32;*canvas,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*string,&#32;<emphasis role="keywordtype">int</emphasis>&#32;charQuantity,&#32;ksys_color_t&#32;fontColor,&#32;uint32_t&#32;params)&#32;__attribute__((__stdcall__));
61 
66 <emphasis role="keyword">extern</emphasis>&#32;int&#32;(*countUTF8Z)(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*string,&#32;<emphasis role="keywordtype">int</emphasis>&#32;byteQuantity)&#32;__attribute__((__stdcall__));
67 
69 <emphasis role="keyword">extern</emphasis>&#32;int&#32;(*charsFit)(<emphasis role="keywordtype">int</emphasis>&#32;areaWidth,&#32;<emphasis role="keywordtype">int</emphasis>&#32;charHeight)&#32;__attribute__((__stdcall__));
70 
74 <emphasis role="keyword">extern</emphasis>&#32;int&#32;(*strWidth)(<emphasis role="keywordtype">int</emphasis>&#32;charQuantity,&#32;<emphasis role="keywordtype">int</emphasis>&#32;charHeight)&#32;__attribute__((__stdcall__));
75 
89 rgb_t&#32;*DrawTextToRGBMap(<emphasis role="keyword">const</emphasis>&#32;rgb_t&#32;*canvas,&#32;<emphasis role="keywordtype">int</emphasis>&#32;canvasWidth,&#32;<emphasis role="keywordtype">int</emphasis>&#32;canvasHeight,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keywordtype">string</emphasis>,&#32;uint8_t&#32;width,&#32;uint8_t&#32;height,&#32;ksys_color_t&#32;fontColor,&#32;uint8_t&#32;flags,&#32;uint8_t&#32;encoding&#32;=&#32;Rasterworks_UTF8)
90 {
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;l&#32;=&#32;canvasHeight&#32;*&#32;canvasHeight&#32;*&#32;3&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char);
92 &#32;&#32;&#32;&#32;
93 &#32;&#32;&#32;&#32;rgb_t&#32;*buff&#32;=(rgb_t*)&#32;malloc(l);
94 &#32;&#32;&#32;&#32;*((<emphasis role="keywordtype">int</emphasis>&#32;*)buff)&#32;=&#32;canvasWidth;
95 &#32;&#32;&#32;&#32;*((<emphasis role="keywordtype">int</emphasis>&#32;*)buff&#32;+&#32;1)&#32;=&#32;canvasHeight;
96 &#32;&#32;&#32;&#32;memcpy(buff+8,&#32;canvas,&#32;l);
97 
98 &#32;&#32;&#32;&#32;drawText(buff,&#32;x,&#32;y,&#32;<emphasis role="keywordtype">string</emphasis>,&#32;countUTF8Z(<emphasis role="keywordtype">string</emphasis>,&#32;-1),&#32;fontColor,&#32;(flags&#32;&gt;&gt;&#32;24)&#32;+&#32;(width&#32;&gt;&gt;&#32;16)&#32;+&#32;(height&#32;&gt;&gt;&#32;8)&#32;+&#32;encoding);
99 
100 &#32;&#32;&#32;&#32;memcpy(buff,&#32;buff+8,&#32;l);
101 
102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buff;
103 }
104 
105 }&#32;<emphasis role="comment">//&#32;extern&#32;&quot;C&quot;</emphasis>
106 &#32;
107 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;KOLIBRI_RASTERWORKS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
