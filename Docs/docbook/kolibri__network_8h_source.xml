<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_kolibri__network_8h_source" xml:lang="ru">
<title>kolibri_network.h</title>
<indexterm><primary>C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/C_Layer/INCLUDE/kolibri_network.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;__NETWORK_H</emphasis>
2 <emphasis role="preprocessor">#define&#32;__NETWORK_H</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&lt;sys/socket.h&gt;</emphasis>
5 
6 <emphasis role="preprocessor">#define&#32;EAI_ADDRFAMILY&#32;1</emphasis>
7 <emphasis role="preprocessor">#define&#32;EAI_AGAIN&#32;&#32;&#32;&#32;&#32;&#32;2</emphasis>
8 <emphasis role="preprocessor">#define&#32;EAI_BADFLAGS&#32;&#32;&#32;3</emphasis>
9 <emphasis role="preprocessor">#define&#32;EAI_FAIL&#32;&#32;&#32;&#32;&#32;&#32;&#32;4</emphasis>
10 <emphasis role="preprocessor">#define&#32;EAI_FAMILY&#32;&#32;&#32;&#32;&#32;5</emphasis>
11 <emphasis role="preprocessor">#define&#32;EAI_MEMORY&#32;&#32;&#32;&#32;&#32;6</emphasis>
12 <emphasis role="preprocessor">#define&#32;EAI_NONAME&#32;&#32;&#32;&#32;&#32;8</emphasis>
13 <emphasis role="preprocessor">#define&#32;EAI_SERVICE&#32;&#32;&#32;&#32;9</emphasis>
14 <emphasis role="preprocessor">#define&#32;EAI_SOCKTYPE&#32;&#32;&#32;10</emphasis>
15 <emphasis role="preprocessor">#define&#32;EAI_BADHINTS&#32;&#32;&#32;12</emphasis>
16 <emphasis role="preprocessor">#define&#32;EAI_PROTOCOL&#32;&#32;&#32;13</emphasis>
17 <emphasis role="preprocessor">#define&#32;EAI_OVERFLOW&#32;&#32;&#32;14</emphasis>
18 
19 <emphasis role="comment">//&#32;Flags&#32;for&#32;addrinfo</emphasis>
20 <emphasis role="preprocessor">#define&#32;AI_PASSIVE&#32;&#32;&#32;&#32;&#32;1</emphasis>
21 <emphasis role="preprocessor">#define&#32;AI_CANONNAME&#32;&#32;&#32;2</emphasis>
22 <emphasis role="preprocessor">#define&#32;AI_NUMERICHOST&#32;4</emphasis>
23 <emphasis role="preprocessor">#define&#32;AI_NUMERICSERV&#32;8</emphasis>
24 <emphasis role="preprocessor">#define&#32;AI_ADDRCONFIG&#32;&#32;0x400</emphasis>
25 
26 <emphasis role="preprocessor">#pragma&#32;pack(push,&#32;1)</emphasis>
27 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_a_r_p__entry">ARP_entry</link>{
28 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;IP;
29 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;MAC[6];
30 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;status;
31 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;TTL;
32 };
33 <emphasis role="preprocessor">#pragma&#32;pack(pop)</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;pack(push,&#32;1)&#32;&#32;</emphasis>
36 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structaddrinfo">addrinfo</link>{
37 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;ai_flags;
38 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;ai_family;
39 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;ai_socktype;
40 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;ai_protocol;
41 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;ai_addrlen;
42 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;*ai_canonname;
43 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr&#32;*ai_addr;
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structaddrinfo">addrinfo</link>&#32;*ai_next;
45 };&#32;&#32;
46 <emphasis role="preprocessor">#pragma&#32;pack(pop)</emphasis>
47 
48 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;networklib_init&#32;();
49 <emphasis role="keyword">extern</emphasis>&#32;int&#32;(*inet_addr)(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;hostname)&#32;__attribute__&#32;((stdcall));
50 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;(*inet_ntoa)(<emphasis role="keywordtype">int</emphasis>&#32;ip_addr)&#32;__attribute__&#32;((stdcall));
51 <emphasis role="keyword">extern</emphasis>&#32;int&#32;(*getaddrinfo)(<emphasis role="keywordtype">char</emphasis>*&#32;hostname,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*servname,&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structaddrinfo">addrinfo</link>*&#32;hints,&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structaddrinfo">addrinfo</link>**&#32;res)&#32;__attribute__&#32;((stdcall));
52 <emphasis role="keyword">extern</emphasis>&#32;void&#32;(*freeaddrinfo)(<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structaddrinfo">addrinfo</link>*&#32;ai)&#32;__attribute__&#32;((stdcall));
53 
54 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
