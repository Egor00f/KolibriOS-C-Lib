<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_kolibri_lib_1_1filesystem_1_1_path" xml:lang="ru">
<title>Класс KolibriLib::filesystem::Path</title>
<indexterm><primary>KolibriLib::filesystem::Path</primary></indexterm>
<para>

<para>Путь до файла/папки </para>
 
</para>
<para>
<computeroutput>#include &lt;filesystem.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Открытые члены    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1aadc730b84b546871cf42096c64ec4ba2"/><emphasis role="strong">Path</emphasis> (const std::string &amp;path=&quot;/&quot;)</para>
</listitem>
            <listitem><para>const char * <link linkend="_class_kolibri_lib_1_1filesystem_1_1_path_1a1ce6078475d3a9b5c340e08b1bc65217">GetChars</link> () const</para>

<para>Получить char* строку </para>
</listitem>
            <listitem><para>const std::string &amp; <link linkend="_class_kolibri_lib_1_1filesystem_1_1_path_1a9e652561c552809fd7b5f8b4c87d8565">GetString</link> () const</para>

<para>Получить строку </para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a6c40452c9858b8428c8f1cbc068f11c7"/><link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp; <emphasis role="strong">operator/</emphasis> (const <link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp;a)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1ae68b63e1c7adc51acf4a0844595ae349"/><link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp; <emphasis role="strong">operator/</emphasis> (const std::string &amp;a)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1aae6322945edc11d62d1f60b62c68f192"/><link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp; <emphasis role="strong">operator+</emphasis> (const <link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp;a)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a77bc19fb66e6ce2a7bf1947ab78fe339"/><link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp; <emphasis role="strong">operator+</emphasis> (const std::string &amp;a)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1aa8da971a5bd99ba1efe49ba358d63854"/><link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp; <emphasis role="strong">operator=</emphasis> (const <link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp;a)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a6686962daddadb397f27ab4c61036815"/><link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp; <emphasis role="strong">operator=</emphasis> (const std::string &amp;a)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1af72a4615528982cce3d18497a0d46529"/>bool <emphasis role="strong">operator==</emphasis> (const <link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp;a) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a59e06f6a56954b4b263fc9980ce98c03"/>bool <emphasis role="strong">operator!=</emphasis> (const <link linkend="_class_kolibri_lib_1_1filesystem_1_1_path">Path</link> &amp;a) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a19a924343f3d4f4331918c9d1ff83842"/>bool <emphasis role="strong">operator==</emphasis> (const std::string &amp;a) const</para>
</listitem>
            <listitem><para><anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a03b02abb06494c259780c9e7862bfd5d"/>bool <emphasis role="strong">operator!=</emphasis> (const std::string &amp;a) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Подробное описание</title>

<para>Путь до файла/папки </para>


<section xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1Полность">
<title><title>совместим с std::string</title></title>
</section>
</section>
<section>
<title>Методы</title>
<anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a1ce6078475d3a9b5c340e08b1bc65217"/><section>
    <title>GetChars()</title>
<indexterm><primary>GetChars</primary><secondary>KolibriLib::filesystem::Path</secondary></indexterm>
<indexterm><primary>KolibriLib::filesystem::Path</primary><secondary>GetChars</secondary></indexterm>
<para><computeroutput>const char * KolibriLib::filesystem::Path::GetChars ( ) const</computeroutput></para><para>

<para>Получить char* строку </para>
</para>

<para><formalpara><title>Возвращает</title>

<para>Функция возвращает конвертированную строку <link linkend="_ab9b061b35b2c9b51c2da59cc0ea16b0c">_string</link></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_kolibri_lib_1_1filesystem_1_1_path_1a9e652561c552809fd7b5f8b4c87d8565"/><section>
    <title>GetString()</title>
<indexterm><primary>GetString</primary><secondary>KolibriLib::filesystem::Path</secondary></indexterm>
<indexterm><primary>KolibriLib::filesystem::Path</primary><secondary>GetString</secondary></indexterm>
<para><computeroutput>const std::string &amp; KolibriLib::filesystem::Path::GetString ( ) const</computeroutput></para><para>

<para>Получить строку </para>
</para>

<para><formalpara><title>Возвращает</title>

<para>Функция возвращает <link linkend="_ab9b061b35b2c9b51c2da59cc0ea16b0c">_string</link></para>
</formalpara>
</para>
</section>
<para>
Объявления и описания членов класса находятся в файле:</para>
C:/Users/yyari/Documents/KolibriOS/KolibriOS-Cpp-Lib/include/kolibriLib/system/filesystem.hpp</section>
</section>
